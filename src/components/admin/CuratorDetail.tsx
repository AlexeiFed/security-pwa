/**
 * @file: CuratorDetail.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å –∫–∞—Ä—Ç–æ–π –∏ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
 * @dependencies: react, material-ui, yandex maps, objects service
 * @created: 2025-06-27
 */

import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    IconButton,
    List,
    ListItem,
    ListItemText,
    ListItemIcon,
    Chip,
    Alert,
    Snackbar,
    Button,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Checkbox,
    FormControlLabel,
    GlobalStyles,
    CircularProgress,
    TextField
} from '@mui/material';
import {
    ArrowBack as ArrowBackIcon,
    LocationOn as LocationIcon,
    Security as SecurityIcon,
    Delete as DeleteIcon,
    Visibility as VisibilityIcon,
    VisibilityOff as VisibilityOffIcon,
    WhatsApp as WhatsAppIcon,
    Edit as EditIcon,
    Save as SaveIcon,
    Cancel as CancelIcon,
    ContentCopy as ContentCopyIcon,
    Telegram as TelegramIcon
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';
import { Curator, ObjectData } from '../../types';
import { getCurators, getCuratorCredentials, updateCuratorCredentials } from '../../services/auth';
import { getObjects } from '../../services/objects';
import YandexMap from '../maps/YandexMap';
import Header from '../common/Header';
import { colors } from '../../utils/colors';

const CuratorDetail = () => {
    const navigate = useNavigate();
    const { curatorId } = useParams<{ curatorId: string }>();
    const [curator, setCurator] = useState<Curator | null>(null);
    const [objects, setObjects] = useState<ObjectData[]>([]);
    const [curatorObjects, setCuratorObjects] = useState<ObjectData[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [selectedObjectId, setSelectedObjectId] = useState<string | null>(null);
    const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({
        open: false,
        message: '',
        severity: 'success'
    });

    const [editDialogOpen, setEditDialogOpen] = useState(false);
    const [editAssignedObjects, setEditAssignedObjects] = useState<string[]>([]);
    const [hoveredObjectId, setHoveredObjectId] = useState<string | null>(null);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [objectToDelete, setObjectToDelete] = useState<string | null>(null);
    const [deleting, setDeleting] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
    const [credentialsDialogOpen, setCredentialsDialogOpen] = useState(false);
    const [isEditingCredentials, setIsEditingCredentials] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [curatorCredentials, setCuratorCredentials] = useState({
        email: '',
        password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
    });
    const [editedCredentials, setEditedCredentials] = useState({
        email: '',
        password: ''
    });
    const [loadingCredentials, setLoadingCredentials] = useState(false);
    const [allCurators, setAllCurators] = useState<Curator[]>([]);

    const khabarovskCenter: [number, number] = [48.4827, 135.0840];

    useEffect(() => {
        if (curatorId) {
            loadCuratorData();
        }
    }, [curatorId]);

    const loadCuratorData = async () => {
        try {
            setLoading(true);
            const [curatorsData, objectsData] = await Promise.all([
                getCurators(),
                getObjects()
            ]);

            const foundCurator = curatorsData.find(c => c.uid === curatorId);
            if (!foundCurator) {
                setError('–ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            setCurator(foundCurator);
            setAllCurators(curatorsData);
            setObjects(objectsData);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞
            const curatorObjectsData = objectsData.filter(obj =>
                foundCurator.assignedObjects.includes(obj.id)
            );
            setCuratorObjects(curatorObjectsData);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞
            await loadCuratorCredentials(foundCurator);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞:', err);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            setLoading(false);
        }
    };

    const loadCuratorCredentials = async (curatorData: Curator) => {
        try {
            setLoadingCredentials(true);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            const credentials = await getCuratorCredentials(curatorData.uid);

            if (credentials) {
                setCuratorCredentials({
                    email: credentials.email,
                    password: credentials.password
                });

                setEditedCredentials({
                    email: credentials.email,
                    password: credentials.password
                });
            } else {
                // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞
                setCuratorCredentials({
                    email: curatorData.email || '',
                    password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
                });

                setEditedCredentials({
                    email: curatorData.email || '',
                    password: ''
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'error');

            // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setCuratorCredentials({
                email: curatorData.email || '',
                password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
            });
        } finally {
            setLoadingCredentials(false);
        }
    };



    const handleObjectClick = (objectId: string) => {
        setSelectedObjectId(objectId);
    };

    const showSnackbar = (message: string, severity: 'success' | 'error') => {
        setSnackbar({ open: true, message, severity });
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const generatePassword = (): string => {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let password = '';
        for (let i = 0; i < 8; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    };

    const handleEditCredentials = () => {
        setEditedCredentials({
            email: curatorCredentials.email,
            password: ''
        });
        setIsEditingCredentials(true);
    };

    const handleSaveCredentials = async () => {
        try {
            if (!editedCredentials.email || !editedCredentials.password) {
                showSnackbar('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
                return;
            }

            if (!curator?.uid) {
                showSnackbar('–û—à–∏–±–∫–∞: –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            await updateCuratorCredentials(
                curator.uid,
                editedCredentials.email,
                editedCredentials.password
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setCuratorCredentials({
                email: editedCredentials.email,
                password: editedCredentials.password
            });

            setIsEditingCredentials(false);
            showSnackbar('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ', 'error');
        }
    };

    const handleCancelEdit = () => {
        setIsEditingCredentials(false);
        setEditedCredentials({
            email: curatorCredentials.email,
            password: ''
        });
    };

    const handleGeneratePassword = () => {
        const newPassword = generatePassword();
        setEditedCredentials(prev => ({ ...prev, password: newPassword }));
    };

    const handleSendViaWhatsApp = () => {
        const message = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n\n–õ–æ–≥–∏–Ω: ${curatorCredentials.email}\n–ü–∞—Ä–æ–ª—å: ${curatorCredentials.password}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ß–û–û "–í–ò–¢–Ø–ó–¨"`;
        const encodedMessage = encodeURIComponent(message);
        const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;
        window.open(whatsappUrl, '_blank');
    };

    const handleSendViaTelegram = () => {
        const message = `üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n\nüë§ –ö—É—Ä–∞—Ç–æ—Ä: ${curator?.name}\nüìß Email: ${curatorCredentials.email}\nüîë –ü–∞—Ä–æ–ª—å: ${curatorCredentials.password === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' ? '–°–∫—Ä—ã—Ç' : curatorCredentials.password}\n\nüåê –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${window.location.origin}`;
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://t.me/share/url?url=${encodeURIComponent(window.location.origin)}&text=${encodedMessage}`, '_blank');
    };

    const copyToClipboard = (text: string) => {
        navigator.clipboard.writeText(text);
        showSnackbar('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'working': return 'success';
            case 'vacation': return 'warning';
            case 'sick': return 'error';
            default: return 'default';
        }
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'working': return '–†–∞–±–æ—Ç–∞–µ—Ç';
            case 'vacation': return '–û—Ç–ø—É—Å–∫';
            case 'sick': return '–ë–æ–ª–µ–Ω';
            default: return status;
        }
    };

    if (loading) {
        return (
            <Box sx={{ p: 3 }}>
                <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞...</Typography>
            </Box>
        );
    }

    if (error || !curator) {
        return (
            <Box sx={{ p: 3 }}>
                <Alert severity="error">{error || '–ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}</Alert>
            </Box>
        );
    }

    return (
        <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #0A2463 0%, #000 100%)' }}>
            <Box sx={{ p: 3 }}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                    <IconButton
                        onClick={() => navigate('/admin/curators')}
                        sx={{
                            mr: 2,
                            color: colors.secondary.main,
                            backgroundColor: 'rgba(212, 175, 55, 0.1)',
                            '&:hover': {
                                backgroundColor: 'rgba(212, 175, 55, 0.2)',
                                transform: 'scale(1.1)'
                            },
                            transition: 'all 0.3s ease'
                        }}
                    >
                        <ArrowBackIcon />
                    </IconButton>
                    <Typography variant="h4" component="h1" sx={{ color: colors.text.primary, fontWeight: 600 }}>
                        –ü—Ä–æ—Ñ–∏–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞
                    </Typography>
                </Box>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–µ */}
                <Box sx={{ mb: 3, p: 3, background: 'rgba(255,255,255,0.04)', borderRadius: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
                    <Box>
                        <Typography variant="h5" component="h2" sx={{ color: '#fff', fontWeight: 700 }}>
                            {curator.name}
                        </Typography>
                        {curator.phone && (
                            <Typography variant="body1" sx={{ color: '#ccc', fontSize: 16 }}>
                                {curator.phone}
                            </Typography>
                        )}
                        {curator.createdAt && (
                            <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.6)', fontSize: 14, mt: 0.5 }}>
                                –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {curator.createdAt.toLocaleDateString('ru-RU')}
                            </Typography>
                        )}
                    </Box>
                    <Chip
                        label={getStatusText(curator.status)}
                        color={getStatusColor(curator.status) as any}
                        sx={{ ml: 'auto' }}
                    />
                </Box>

                {/* –°–µ–∫—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
                <Box sx={{ mt: 2, p: 3, background: 'rgba(255,255,255,0.04)', borderRadius: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                        <Typography variant="h6" sx={{ color: '#fff', fontWeight: 600 }}>
                            –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        </Typography>
                        {!isEditingCredentials && (
                            <Button
                                variant="outlined"
                                size="small"
                                startIcon={<EditIcon />}
                                sx={{
                                    color: '#D4AF37',
                                    borderColor: '#D4AF37',
                                    '&:hover': {
                                        borderColor: '#FFD700',
                                        color: '#FFD700'
                                    }
                                }}
                                onClick={handleEditCredentials}
                            >
                                –ò–∑–º–µ–Ω–∏—Ç—å
                            </Button>
                        )}
                    </Box>

                    {isEditingCredentials ? (
                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                            <TextField
                                fullWidth
                                label="Email"
                                value={editedCredentials.email}
                                onChange={(e) => setEditedCredentials(prev => ({ ...prev, email: e.target.value }))}
                                sx={{
                                    '& .MuiOutlinedInput-root': {
                                        '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                        '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                        '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                    },
                                    '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                    '& .MuiInputBase-input': { color: '#fff' },
                                }}
                            />
                            <Box sx={{ display: 'flex', gap: 1 }}>
                                <TextField
                                    fullWidth
                                    label="–ü–∞—Ä–æ–ª—å"
                                    type={showPassword ? 'text' : 'password'}
                                    value={editedCredentials.password}
                                    onChange={(e) => setEditedCredentials(prev => ({ ...prev, password: e.target.value }))}
                                    InputProps={{
                                        endAdornment: (
                                            <IconButton
                                                onClick={() => setShowPassword(!showPassword)}
                                                edge="end"
                                                sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                                            >
                                                {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                                            </IconButton>
                                        ),
                                    }}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                            '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                            '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                        },
                                        '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                        '& .MuiInputBase-input': { color: '#fff' },
                                    }}
                                />
                                <Button
                                    variant="outlined"
                                    onClick={handleGeneratePassword}
                                    sx={{
                                        color: '#D4AF37',
                                        borderColor: '#D4AF37',
                                        minWidth: 'auto',
                                        px: 2,
                                        '&:hover': {
                                            borderColor: '#FFD700',
                                            color: '#FFD700'
                                        }
                                    }}
                                >
                                    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                                </Button>
                            </Box>
                            <Box sx={{ display: 'flex', gap: 1 }}>
                                <Button
                                    variant="contained"
                                    startIcon={<SaveIcon />}
                                    onClick={handleSaveCredentials}
                                    sx={{
                                        backgroundColor: '#4caf50',
                                        '&:hover': { backgroundColor: '#45a049' }
                                    }}
                                >
                                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </Button>
                                <Button
                                    variant="outlined"
                                    startIcon={<CancelIcon />}
                                    onClick={handleCancelEdit}
                                    sx={{
                                        color: '#ff6b6b',
                                        borderColor: '#ff6b6b',
                                        '&:hover': {
                                            borderColor: '#ff5252',
                                            color: '#ff5252'
                                        }
                                    }}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </Button>
                            </Box>
                        </Box>
                    ) : (
                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                            {loadingCredentials ? (
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, py: 1 }}>
                                    <CircularProgress size={20} sx={{ color: '#D4AF37' }} />
                                    <Typography variant="body2" sx={{ color: '#ccc' }}>
                                        –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...
                                    </Typography>
                                </Box>
                            ) : (
                                <>
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                        <Typography variant="body1" sx={{ color: '#ccc', minWidth: 80 }}>
                                            Email:
                                        </Typography>
                                        <Typography variant="body1" sx={{ color: '#fff', fontWeight: 500 }}>
                                            {curatorCredentials.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                        </Typography>
                                        {curatorCredentials.email && (
                                            <IconButton
                                                size="small"
                                                onClick={() => copyToClipboard(curatorCredentials.email)}
                                                sx={{ color: '#D4AF37' }}
                                            >
                                                <ContentCopyIcon />
                                            </IconButton>
                                        )}
                                    </Box>
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                        <Typography variant="body1" sx={{ color: '#ccc', minWidth: 80 }}>
                                            –ü–∞—Ä–æ–ª—å:
                                        </Typography>
                                        <Typography variant="body1" sx={{ color: '#fff', fontWeight: 500 }}>
                                            {curatorCredentials.password}
                                        </Typography>
                                        <IconButton
                                            size="small"
                                            onClick={() => copyToClipboard(curatorCredentials.password)}
                                            sx={{ color: '#D4AF37' }}
                                        >
                                            <ContentCopyIcon />
                                        </IconButton>
                                    </Box>
                                </>
                            )}
                            <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                                <Button
                                    variant="contained"
                                    startIcon={<WhatsAppIcon />}
                                    onClick={handleSendViaWhatsApp}
                                    disabled={!curatorCredentials.email || curatorCredentials.password === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}
                                    sx={{
                                        backgroundColor: '#25D366',
                                        '&:hover': { backgroundColor: '#128C7E' },
                                        '&:disabled': {
                                            backgroundColor: 'rgba(255, 255, 255, 0.1)',
                                            color: 'rgba(255, 255, 255, 0.3)'
                                        }
                                    }}
                                >
                                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
                                </Button>
                                <Button
                                    variant="contained"
                                    startIcon={<TelegramIcon />}
                                    onClick={handleSendViaTelegram}
                                    disabled={!curatorCredentials.email || curatorCredentials.password === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}
                                    sx={{
                                        backgroundColor: '#0088cc',
                                        '&:hover': { backgroundColor: '#006699' },
                                        '&:disabled': {
                                            backgroundColor: 'rgba(255, 255, 255, 0.1)',
                                            color: 'rgba(255, 255, 255, 0.3)'
                                        }
                                    }}
                                >
                                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
                                </Button>
                            </Box>
                        </Box>
                    )}
                </Box>
                <Box sx={{ mt: 4, p: 3, display: 'flex', gap: 3, height: 'calc(100vh - 120px)' }}>
                    {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ */}
                    <Box sx={{ width: '40%', minWidth: 300, pr: 3, display: 'flex', flexDirection: 'column', height: '100%' }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                            <Typography variant="h6" component="h2">
                                –û–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ ({curatorObjects.length})
                            </Typography>
                            <Button
                                variant="outlined"
                                size="small"
                                sx={{ color: '#fff', borderColor: '#D4AF37', background: 'transparent', '&:hover': { background: 'transparent', borderColor: '#FFD700', color: '#fff' } }}
                                onClick={() => { setEditAssignedObjects(curator.assignedObjects); setEditDialogOpen(true); }}
                            >
                                –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã
                            </Button>
                        </Box>
                        <Box sx={{ flex: 1, overflow: 'auto', display: 'flex', flexDirection: 'column', gap: 2 }}>
                            {curatorObjects.length > 0 ? (
                                curatorObjects.map((obj) => (
                                    <Box
                                        key={obj.id}
                                        sx={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: 2,
                                            p: 1,
                                            borderBottom: '1px solid #D4AF37',
                                            background: hoveredObjectId === obj.id ? 'rgba(255, 215, 0, 0.12)' : 'transparent',
                                            cursor: 'pointer',
                                            transition: 'background 0.2s',
                                        }}
                                        onMouseEnter={() => setHoveredObjectId(obj.id)}
                                        onMouseLeave={() => setHoveredObjectId(null)}
                                    >
                                        <SecurityIcon color={hoveredObjectId === obj.id ? 'error' : 'primary'} sx={{ fontSize: hoveredObjectId === obj.id ? 28 : 24, transition: 'all 0.2s' }} />
                                        <Box sx={{ flex: 1 }}>
                                            <Typography variant="body1" sx={{ color: '#fff', fontWeight: 500 }}>{obj.name}</Typography>
                                            <Typography variant="body2" sx={{ color: '#ccc' }}>{obj.address}</Typography>
                                        </Box>
                                        <DeleteIcon sx={{ color: '#ff4444', cursor: 'pointer' }} onClick={e => { e.stopPropagation(); setObjectToDelete(obj.id); setDeleteDialogOpen(true); }} />
                                    </Box>
                                ))
                            ) : (
                                <Typography sx={{ color: '#ccc', mt: 2 }}>–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</Typography>
                            )}
                        </Box>
                    </Box>
                    {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–∞ */}
                    <Box sx={{ flex: 1, minHeight: 400, height: '100%' }}>
                        <YandexMap
                            center={[48.4827, 135.0840]}
                            markers={curatorObjects.filter(obj => Array.isArray(obj.position) && obj.position.length === 2 && obj.position.every(n => typeof n === 'number')).map(obj => ({
                                id: obj.id,
                                title: obj.name,
                                position: obj.position,
                                status: 'checked',
                                isSelected: false
                            }))}
                            hoveredObjectId={hoveredObjectId}
                            onMarkerClick={() => { }}
                            height="100%"
                        />
                    </Box>
                </Box>
                {/* –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ */}
                <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth="sm" fullWidth>
                    <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä—É</DialogTitle>
                    <DialogContent>
                        <Typography variant="body2" sx={{ mb: 2 }}>
                            –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä—É:
                        </Typography>
                        <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
                            {(() => {
                                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                                const assignedObjectIds = new Set<string>();
                                allCurators.forEach((cur: Curator) => {
                                    if (cur.uid !== curator?.uid) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞
                                        cur.assignedObjects.forEach(objectId => {
                                            assignedObjectIds.add(objectId);
                                        });
                                    }
                                });

                                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                                const availableObjects = objects.filter(obj =>
                                    !assignedObjectIds.has(obj.id) && obj.status === 'active'
                                );

                                if (availableObjects.length === 0) {
                                    return (
                                        <Typography sx={{ color: 'text.secondary', textAlign: 'center', py: 2 }}>
                                            –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥—Ä—É–≥–∏–º –∫—É—Ä–∞—Ç–æ—Ä–∞–º
                                        </Typography>
                                    );
                                }

                                return (
                                    <List sx={{ width: '100%' }}>
                                        {availableObjects.map((obj) => (
                                            <ListItem key={obj.id} sx={{ px: 0 }}>
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox
                                                            checked={editAssignedObjects.includes(obj.id)}
                                                            onChange={(e) => {
                                                                if (e.target.checked) {
                                                                    setEditAssignedObjects(prev => [...prev, obj.id]);
                                                                } else {
                                                                    setEditAssignedObjects(prev => prev.filter(id => id !== obj.id));
                                                                }
                                                            }}
                                                        />
                                                    }
                                                    label={
                                                        <Box>
                                                            <Typography variant="body1" sx={{ fontWeight: 500 }}>
                                                                {obj.name}
                                                            </Typography>
                                                            <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                                                                {obj.address}
                                                            </Typography>
                                                        </Box>
                                                    }
                                                    sx={{ width: '100%', m: 0 }}
                                                />
                                            </ListItem>
                                        ))}
                                    </List>
                                );
                            })()}
                        </Box>
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={() => setEditDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
                        <Button onClick={async () => {
                            // –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                            if (curator) {
                                await (await import('../../services/auth')).updateCuratorObjects(curator.uid, editAssignedObjects);
                                setEditDialogOpen(false);
                                loadCuratorData();
                            }
                        }} variant="contained">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
                    </DialogActions>
                </Dialog>
                {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
                <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
                    <DialogTitle>–£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç</DialogTitle>
                    <DialogContent>
                        {deleting ? (
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, py: 2 }}>
                                <CircularProgress size={24} color="error" />
                                <Typography>–û–±—ä–µ–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è...</Typography>
                            </Box>
                        ) : (
                            <Typography>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞?</Typography>
                        )}
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={() => setDeleteDialogOpen(false)} disabled={deleting}>–û—Ç–º–µ–Ω–∞</Button>
                        <Button color="error" variant="contained" disabled={deleting} onClick={async () => {
                            if (curator && objectToDelete) {
                                setDeleting(true);
                                const newAssigned = curator.assignedObjects.filter(id => id !== objectToDelete);
                                await (await import('../../services/auth')).updateCuratorObjects(curator.uid, newAssigned);
                                setDeleting(false);
                                setDeleteDialogOpen(false);
                                setObjectToDelete(null);
                                loadCuratorData();
                            }
                        }}>–£–¥–∞–ª–∏—Ç—å</Button>
                    </DialogActions>
                </Dialog>
                <Snackbar
                    open={snackbar.open}
                    autoHideDuration={6000}
                    onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
                >
                    <Alert severity={snackbar.severity} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
                        {snackbar.message}
                    </Alert>
                </Snackbar>
            </Box>
        </Box>
    );
};

export default CuratorDetail; 