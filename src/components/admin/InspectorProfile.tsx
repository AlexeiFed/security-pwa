import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    Chip,
    Tabs,
    Tab,
    List,
    ListItem,
    ListItemText,
    ListItemIcon,
    Divider,
    Button,
    Alert,
    IconButton,
    TextField,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Snackbar,
    CircularProgress,
    FormControl,
    InputLabel,
    Select,
    MenuItem
} from '@mui/material';
import {
    ArrowBack as ArrowBackIcon,
    Assignment as AssignmentIcon,
    CheckCircle as CheckCircleIcon,
    Pending as PendingIcon,
    Schedule as ScheduleIcon,
    Person as PersonIcon,
    Visibility as VisibilityIcon,
    VisibilityOff as VisibilityOffIcon,
    Edit as EditIcon,
    Save as SaveIcon,
    Cancel as CancelIcon,
    ContentCopy as ContentCopyIcon,
    WhatsApp as WhatsAppIcon,
    Telegram as TelegramIcon,
    AccessTime as TimeIcon,
    LocationOn as LocationIcon
} from '@mui/icons-material';
import { useParams, useNavigate } from 'react-router-dom';
import { getInspectorById, getInspectorCredentials, updateInspectorCredentials } from '../../services/auth';
import { getInspectorTasks } from '../../services/tasks';
import { Inspector } from '../../types';
import { colors } from '../../utils/colors';

interface TabPanelProps {
    children?: React.ReactNode;
    index: number;
    value: number;
}

function TabPanel(props: TabPanelProps) {
    const { children, value, index, ...other } = props;

    return (
        <Box
            role="tabpanel"
            hidden={value !== index}
            id={`inspector-tabpanel-${index}`}
            aria-labelledby={`inspector-tab-${index}`}
            {...other}
        >
            {value === index && (
                <Box sx={{ p: 3 }}>
                    {children}
                </Box>
            )}
        </Box>
    );
}

const InspectorProfile = () => {
    const { uid } = useParams<{ uid: string }>();
    const navigate = useNavigate();
    const [inspector, setInspector] = useState<Inspector | null>(null);
    const [inspectorTasks, setInspectorTasks] = useState<any[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [tabValue, setTabValue] = useState(0);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const [credentialsDialogOpen, setCredentialsDialogOpen] = useState(false);
    const [isEditingCredentials, setIsEditingCredentials] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [inspectorCredentials, setInspectorCredentials] = useState({
        email: '',
        password: ''
    });
    const [editedCredentials, setEditedCredentials] = useState({
        email: '',
        password: ''
    });
    const [loadingCredentials, setLoadingCredentials] = useState(false);
    const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({
        open: false,
        message: '',
        severity: 'success'
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    const [dateFilter, setDateFilter] = useState<{
        startDate: string;
        endDate: string;
    }>({
        startDate: '',
        endDate: ''
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤
    const [expandedObjects, setExpandedObjects] = useState<{ [taskId: string]: boolean }>({});

    useEffect(() => {
        if (uid) {
            loadInspector();
        }
    }, [uid]);

    const loadInspector = async () => {
        try {
            setLoading(true);
            setError(null);

            if (!uid) return;

            const data = await getInspectorById(uid);
            if (data) {
                setInspector(data);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await loadInspectorCredentials(data);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
                await loadInspectorTasks(uid);
            } else {
                setError('–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞');
        } finally {
            setLoading(false);
        }
    };

    const loadInspectorTasks = async (inspectorId: string) => {
        try {
            const tasks = await getInspectorTasks(inspectorId);
            setInspectorTasks(tasks);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:', error);
        }
    };

    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
        setTabValue(newValue);
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'working': return 'success';
            case 'vacation': return 'warning';
            case 'sick': return 'error';
            default: return 'default';
        }
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'working': return '–†–∞–±–æ—Ç–∞–µ—Ç';
            case 'vacation': return '–û—Ç–ø—É—Å–∫';
            case 'sick': return '–ë–æ–ª–µ–Ω';
            default: return status;
        }
    };

    const getTaskStatusIcon = (status: string) => {
        switch (status) {
            case 'completed':
                return <CheckCircleIcon color="success" />;
            case 'in_progress':
                return <ScheduleIcon color="primary" />;
            case 'pending':
                return <PendingIcon color="warning" />;
            default:
                return <AssignmentIcon />;
        }
    };

    const getTaskStatusText = (status: string) => {
        switch (status) {
            case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
            case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
            case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
            default: return status;
        }
    };

    const getTaskStatusColor = (status: string) => {
        switch (status) {
            case 'completed': return 'success';
            case 'in_progress': return 'primary';
            case 'pending': return 'warning';
            default: return 'default';
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const loadInspectorCredentials = async (inspectorData: Inspector) => {
        try {
            setLoadingCredentials(true);
            const credentials = await getInspectorCredentials(inspectorData.uid);
            if (credentials) {
                setInspectorCredentials({
                    email: credentials.email || inspectorData.email,
                    password: credentials.password || ''
                });
                setEditedCredentials({
                    email: credentials.email || inspectorData.email,
                    password: credentials.password || ''
                });
            } else {
                setInspectorCredentials({
                    email: inspectorData.email,
                    password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
                });
                setEditedCredentials({
                    email: inspectorData.email,
                    password: ''
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            setInspectorCredentials({
                email: inspectorData.email,
                password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'
            });
            setEditedCredentials({
                email: inspectorData.email,
                password: ''
            });
        } finally {
            setLoadingCredentials(false);
        }
    };

    const handleEditCredentials = () => {
        setIsEditingCredentials(true);
    };

    const handleSaveCredentials = async () => {
        try {
            setLoadingCredentials(true);
            if (inspector) {
                await updateInspectorCredentials(inspector.uid, editedCredentials);
                setInspectorCredentials({
                    email: editedCredentials.email,
                    password: editedCredentials.password
                });
                setIsEditingCredentials(false);
                showSnackbar('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            showSnackbar('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            setLoadingCredentials(false);
        }
    };

    const handleCancelEdit = () => {
        setEditedCredentials({
            email: inspectorCredentials.email,
            password: ''
        });
        setIsEditingCredentials(false);
        setShowPassword(false);
    };

    const generatePassword = (): string => {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < 8; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    };

    const handleGeneratePassword = () => {
        const newPassword = generatePassword();
        setEditedCredentials(prev => ({ ...prev, password: newPassword }));
    };

    const copyToClipboard = (text: string) => {
        navigator.clipboard.writeText(text);
        showSnackbar('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    };

    const handleSendViaWhatsApp = () => {
        const message = `üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n\nüë§ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä: ${inspector?.name}\nüìß Email: ${inspectorCredentials.email}\nüîë –ü–∞—Ä–æ–ª—å: ${inspectorCredentials.password}\n\nüåê –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${window.location.origin}`;
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
    };

    const handleSendViaTelegram = () => {
        const message = `üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n\nüë§ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä: ${inspector?.name}\nüìß Email: ${inspectorCredentials.email}\nüîë –ü–∞—Ä–æ–ª—å: ${inspectorCredentials.password}\n\nüåê –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${window.location.origin}`;
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://t.me/share/url?url=${encodeURIComponent(window.location.origin)}&text=${encodedMessage}`, '_blank');
    };

    const showSnackbar = (message: string, severity: 'success' | 'error') => {
        setSnackbar({ open: true, message, severity });
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π
    const filterTasksByDate = (tasks: any[]) => {
        if (!dateFilter.startDate && !dateFilter.endDate) {
            return tasks;
        }

        return tasks.filter(task => {
            const taskDate = task.createdAt || task.assignedAt || new Date();
            const taskDateObj = new Date(taskDate);

            if (dateFilter.startDate && dateFilter.endDate) {
                const startDate = new Date(dateFilter.startDate);
                const endDate = new Date(dateFilter.endDate);
                endDate.setHours(23, 59, 59, 999); // –í–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –¥–µ–Ω—å
                return taskDateObj >= startDate && taskDateObj <= endDate;
            } else if (dateFilter.startDate) {
                const startDate = new Date(dateFilter.startDate);
                return taskDateObj >= startDate;
            } else if (dateFilter.endDate) {
                const endDate = new Date(dateFilter.endDate);
                endDate.setHours(23, 59, 59, 999);
                return taskDateObj <= endDate;
            }

            return true;
        });
    };

    const handleDateFilterChange = (field: 'startDate' | 'endDate', value: string) => {
        setDateFilter(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const clearDateFilter = () => {
        setDateFilter({
            startDate: '',
            endDate: ''
        });
    };

    const toggleObjectsExpansion = (taskId: string) => {
        setExpandedObjects(prev => ({
            ...prev,
            [taskId]: !prev[taskId]
        }));
    };

    // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const allTasks = inspectorTasks || [];
    const filteredTasks = filterTasksByDate(allTasks);
    const currentTasks = filteredTasks.filter(task => task.status !== 'completed');
    const completedTasks = filteredTasks.filter(task => task.status === 'completed');

    if (loading) {
        return (
            <Box sx={{ p: 3 }}>
                <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞...</Typography>
            </Box>
        );
    }

    if (error || !inspector) {
        return (
            <Box sx={{ p: 3 }}>
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error || '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                </Alert>
                <Button
                    variant="outlined"
                    startIcon={<ArrowBackIcon />}
                    onClick={() => navigate('/admin/inspectors')}
                >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
                </Button>
            </Box>
        );
    }

    return (
        <Box sx={{ p: 3 }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <IconButton
                    onClick={() => navigate('/admin/inspectors')}
                    sx={{
                        mr: 2,
                        color: colors.secondary.main,
                        backgroundColor: 'rgba(212, 175, 55, 0.1)',
                        '&:hover': {
                            backgroundColor: 'rgba(212, 175, 55, 0.2)',
                            transform: 'scale(1.1)'
                        },
                        transition: 'all 0.3s ease'
                    }}
                >
                    <ArrowBackIcon />
                </IconButton>
                <Typography variant="h4" component="h1" sx={{ color: colors.text.primary, fontWeight: 600 }}>
                    –ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
                </Typography>
            </Box>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ */}
            <Box sx={{ mb: 3, p: 3, background: 'rgba(255,255,255,0.04)', borderRadius: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
                <Box>
                    <Typography variant="h5" component="h2" sx={{ color: '#fff', fontWeight: 700 }}>
                        {inspector.name}
                    </Typography>
                    {inspector.createdAt && (
                        <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.6)', fontSize: 14, mt: 0.5 }}>
                            –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {inspector.createdAt.toLocaleDateString('ru-RU')}
                        </Typography>
                    )}
                </Box>
                <Chip
                    label={getStatusText(inspector.status)}
                    color={getStatusColor(inspector.status) as any}
                    sx={{ ml: 'auto' }}
                />
            </Box>

            {/* –°–µ–∫—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
            <Box sx={{ mt: 2, p: 3, background: 'rgba(255,255,255,0.04)', borderRadius: 2 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                    <Typography variant="h6" sx={{ color: '#fff', fontWeight: 600 }}>
                        –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    </Typography>
                    {!isEditingCredentials && (
                        <Button
                            variant="outlined"
                            size="small"
                            startIcon={<EditIcon />}
                            sx={{
                                color: '#D4AF37',
                                borderColor: '#D4AF37',
                                '&:hover': {
                                    borderColor: '#FFD700',
                                    color: '#FFD700'
                                }
                            }}
                            onClick={handleEditCredentials}
                        >
                            –ò–∑–º–µ–Ω–∏—Ç—å
                        </Button>
                    )}
                </Box>

                {isEditingCredentials ? (
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                        <TextField
                            fullWidth
                            label="Email"
                            value={editedCredentials.email}
                            onChange={(e) => setEditedCredentials(prev => ({ ...prev, email: e.target.value }))}
                            sx={{
                                '& .MuiOutlinedInput-root': {
                                    '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                    '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                    '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                },
                                '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                '& .MuiInputBase-input': { color: '#fff' },
                            }}
                        />
                        <Box sx={{ display: 'flex', gap: 1 }}>
                            <TextField
                                fullWidth
                                label="–ü–∞—Ä–æ–ª—å"
                                type={showPassword ? 'text' : 'password'}
                                value={editedCredentials.password}
                                onChange={(e) => setEditedCredentials(prev => ({ ...prev, password: e.target.value }))}
                                InputProps={{
                                    endAdornment: (
                                        <IconButton
                                            onClick={() => setShowPassword(!showPassword)}
                                            edge="end"
                                            sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                                        >
                                            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                                        </IconButton>
                                    ),
                                }}
                                sx={{
                                    '& .MuiOutlinedInput-root': {
                                        '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                        '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                        '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                    },
                                    '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                    '& .MuiInputBase-input': { color: '#fff' },
                                }}
                            />
                            <Button
                                variant="outlined"
                                onClick={handleGeneratePassword}
                                sx={{
                                    color: '#D4AF37',
                                    borderColor: '#D4AF37',
                                    minWidth: 'auto',
                                    px: 2,
                                    '&:hover': {
                                        borderColor: '#FFD700',
                                        color: '#FFD700'
                                    }
                                }}
                            >
                                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                            </Button>
                        </Box>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                            <Button
                                variant="contained"
                                startIcon={<SaveIcon />}
                                onClick={handleSaveCredentials}
                                disabled={loadingCredentials}
                                sx={{
                                    backgroundColor: '#4caf50',
                                    '&:hover': { backgroundColor: '#45a049' }
                                }}
                            >
                                {loadingCredentials ? <CircularProgress size={20} /> : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                            </Button>
                            <Button
                                variant="outlined"
                                startIcon={<CancelIcon />}
                                onClick={handleCancelEdit}
                                disabled={loadingCredentials}
                                sx={{
                                    color: '#ff6b6b',
                                    borderColor: '#ff6b6b',
                                    '&:hover': {
                                        borderColor: '#ff5252',
                                        color: '#ff5252'
                                    }
                                }}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </Box>
                    </Box>
                ) : (
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                        {loadingCredentials ? (
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, py: 1 }}>
                                <CircularProgress size={20} sx={{ color: '#D4AF37' }} />
                                <Typography variant="body2" sx={{ color: '#ccc' }}>
                                    –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...
                                </Typography>
                            </Box>
                        ) : (
                            <>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                    <Typography variant="body1" sx={{ color: '#ccc', minWidth: 80 }}>
                                        Email:
                                    </Typography>
                                    <Typography variant="body1" sx={{ color: '#fff', fontWeight: 500 }}>
                                        {inspectorCredentials.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                    </Typography>
                                    {inspectorCredentials.email && (
                                        <IconButton
                                            size="small"
                                            onClick={() => copyToClipboard(inspectorCredentials.email)}
                                            sx={{ color: '#D4AF37' }}
                                        >
                                            <ContentCopyIcon />
                                        </IconButton>
                                    )}
                                </Box>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                    <Typography variant="body1" sx={{ color: '#ccc', minWidth: 80 }}>
                                        –ü–∞—Ä–æ–ª—å:
                                    </Typography>
                                    <Typography variant="body1" sx={{ color: '#fff', fontWeight: 500, wordBreak: 'break-all' }}>
                                        {inspectorCredentials.password}
                                    </Typography>
                                    <IconButton
                                        size="small"
                                        onClick={() => copyToClipboard(inspectorCredentials.password)}
                                        sx={{ color: '#D4AF37' }}
                                    >
                                        <ContentCopyIcon />
                                    </IconButton>
                                </Box>
                            </>
                        )}
                        <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                            <Button
                                variant="contained"
                                startIcon={<WhatsAppIcon />}
                                onClick={handleSendViaWhatsApp}
                                sx={{
                                    backgroundColor: '#25D366',
                                    '&:hover': { backgroundColor: '#128C7E' }
                                }}
                            >
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
                            </Button>
                            <Button
                                variant="contained"
                                startIcon={<TelegramIcon />}
                                onClick={handleSendViaTelegram}
                                sx={{
                                    backgroundColor: '#0088cc',
                                    '&:hover': { backgroundColor: '#006699' }
                                }}
                            >
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
                            </Button>
                        </Box>
                    </Box>
                )}
            </Box>

            {/* –í–∫–ª–∞–¥–∫–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ */}
            <Box sx={{ mt: 4, p: 3, background: 'rgba(255,255,255,0.04)', borderRadius: 2 }}>
                {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ */}
                <Box sx={{ mb: 3, pb: 2, borderBottom: 1, borderColor: 'rgba(255, 255, 255, 0.2)' }}>
                    <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
                        <TextField
                            label="–î–∞—Ç–∞ —Å"
                            type="date"
                            value={dateFilter.startDate}
                            onChange={(e) => handleDateFilterChange('startDate', e.target.value)}
                            InputLabelProps={{ shrink: true }}
                            sx={{
                                minWidth: 150,
                                '& .MuiOutlinedInput-root': {
                                    '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                    '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                    '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                },
                                '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                '& .MuiInputBase-input': { color: '#fff' },
                            }}
                        />
                        <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                            –ø–æ
                        </Typography>
                        <TextField
                            label="–î–∞—Ç–∞ –ø–æ"
                            type="date"
                            value={dateFilter.endDate}
                            onChange={(e) => handleDateFilterChange('endDate', e.target.value)}
                            InputLabelProps={{ shrink: true }}
                            sx={{
                                minWidth: 150,
                                '& .MuiOutlinedInput-root': {
                                    '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                    '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                                    '&.Mui-focused fieldset': { borderColor: '#D4AF37' },
                                },
                                '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },
                                '& .MuiInputBase-input': { color: '#fff' },
                            }}
                        />
                        <Button
                            variant="outlined"
                            onClick={clearDateFilter}
                            sx={{
                                color: '#D4AF37',
                                borderColor: '#D4AF37',
                                '&:hover': {
                                    borderColor: '#FFD700',
                                    color: '#FFD700'
                                }
                            }}
                        >
                            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                        </Button>
                        {(dateFilter.startDate || dateFilter.endDate) && (
                            <Chip
                                label={`–ù–∞–π–¥–µ–Ω–æ: ${filteredTasks.length} –∑–∞–¥–∞–Ω–∏–π`}
                                color="primary"
                                variant="outlined"
                            />
                        )}
                    </Box>
                </Box>

                <Box sx={{ borderBottom: 1, borderColor: 'rgba(255, 255, 255, 0.2)' }}>
                    <Tabs
                        value={tabValue}
                        onChange={handleTabChange}
                        sx={{
                            '& .MuiTab-root': {
                                color: 'rgba(255, 255, 255, 0.7)',
                                '&.Mui-selected': {
                                    color: '#D4AF37'
                                }
                            },
                            '& .MuiTabs-indicator': {
                                backgroundColor: '#D4AF37'
                            }
                        }}
                    >
                        <Tab
                            label={`–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è (${currentTasks.length})`}
                            id="inspector-tab-0"
                            aria-controls="inspector-tabpanel-0"
                        />
                        <Tab
                            label={`–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (${completedTasks.length})`}
                            id="inspector-tab-1"
                            aria-controls="inspector-tabpanel-1"
                        />
                    </Tabs>
                </Box>

                <TabPanel value={tabValue} index={0}>
                    {currentTasks.length === 0 ? (
                        <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', textAlign: 'center' }}>
                            –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
                        </Typography>
                    ) : (
                        <List>
                            {currentTasks.map((task, index) => (
                                <React.Fragment key={task.id}>
                                    <ListItem sx={{
                                        color: '#ffffff',
                                        border: '2px solid rgba(255, 255, 255, 0.3)',
                                        borderRadius: 2,
                                        mb: 2,
                                        background: 'rgba(255, 255, 255, 0.05)'
                                    }}>
                                        <ListItemIcon>
                                            {getTaskStatusIcon(task.status)}
                                        </ListItemIcon>
                                        <ListItemText
                                            primary={
                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                    <Typography variant="h6" sx={{ color: '#ffffff' }}>
                                                        {task.title}
                                                    </Typography>
                                                    <Chip
                                                        label={getTaskStatusText(task.status)}
                                                        color={getTaskStatusColor(task.status) as any}
                                                        size="small"
                                                        sx={{
                                                            fontWeight: 600,
                                                            '& .MuiChip-label': {
                                                                color: '#ffffff'
                                                            }
                                                        }}
                                                    />
                                                </Box>
                                            }
                                            secondary={
                                                <Box>
                                                    <Typography variant="body2" sx={{ mb: 1, color: 'rgba(255, 255, 255, 0.8)' }}>
                                                        {task.description}
                                                    </Typography>
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                                                            <TimeIcon fontSize="small" sx={{ color: '#ffffff' }} />
                                                            <Typography variant="body2" sx={{ color: '#ffffff' }}>
                                                                –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {task.assignedAt?.toLocaleString('ru-RU') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                            </Typography>
                                                        </Box>
                                                    </Box>
                                                    {task.acceptedAt && (
                                                        <Typography variant="body2" color="success.main">
                                                            ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {task.acceptedAt.toLocaleString('ru-RU')}
                                                        </Typography>
                                                    )}
                                                    {task.objects && task.objects.length > 0 && (
                                                        <Box sx={{ mt: 2 }}>
                                                            <Typography
                                                                variant="subtitle2"
                                                                sx={{
                                                                    color: '#D4AF37',
                                                                    display: 'block',
                                                                    mb: 1,
                                                                    cursor: 'pointer',
                                                                    fontWeight: 500
                                                                }}
                                                                onClick={() => toggleObjectsExpansion(task.id)}
                                                            >
                                                                üè¢ –û–±—ä–µ–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ({task.objects.length})
                                                            </Typography>
                                                            {expandedObjects[task.id] && (
                                                                <List dense>
                                                                    {task.objects.map((obj: any, objIndex: number) => {
                                                                        const checkedDate = obj.checkedAt instanceof Date && !isNaN(obj.checkedAt.getTime())
                                                                            ? obj.checkedAt
                                                                            : (typeof obj.checkedAt === 'string' ? new Date(obj.checkedAt) : null);
                                                                        const isValidChecked = checkedDate instanceof Date && !isNaN(checkedDate.getTime());
                                                                        return (
                                                                            <ListItem key={objIndex} sx={{
                                                                                alignItems: 'flex-start',
                                                                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                                                                borderRadius: 1,
                                                                                mb: 1,
                                                                                background: 'rgba(255, 255, 255, 0.03)'
                                                                            }}>
                                                                                <ListItemIcon>
                                                                                    <LocationIcon fontSize="small" sx={{ color: '#ffffff' }} />
                                                                                </ListItemIcon>
                                                                                <Box sx={{ width: '100%' }}>
                                                                                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                                                                        <Typography component="span" sx={{ fontWeight: 500, color: '#ffffff' }}>
                                                                                            {obj.name || obj.address}
                                                                                        </Typography>
                                                                                        {obj.status === 'checked' ? (
                                                                                            <Chip label="–ü—Ä–æ–≤–µ—Ä–µ–Ω" color="success" size="small" sx={{
                                                                                                fontWeight: 600,
                                                                                                '& .MuiChip-label': {
                                                                                                    color: '#ffffff'
                                                                                                }
                                                                                            }} />
                                                                                        ) : (
                                                                                            <Chip label="–û–∂–∏–¥–∞–µ—Ç" color="warning" size="small" sx={{
                                                                                                fontWeight: 600,
                                                                                                '& .MuiChip-label': {
                                                                                                    color: '#ffffff'
                                                                                                }
                                                                                            }} />
                                                                                        )}
                                                                                    </Box>
                                                                                    <Typography variant="body2" component="span" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                                                                                        {obj.address}
                                                                                    </Typography>
                                                                                    {obj.status === 'checked' && isValidChecked && (
                                                                                        <Typography variant="body2" color="success.main" component="span" sx={{ display: 'block', mt: 0.5 }}>
                                                                                            ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: {checkedDate.toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}
                                                                                        </Typography>
                                                                                    )}
                                                                                    {obj.comments && (
                                                                                        <Typography variant="body2" color="text.secondary" component="span" sx={{ display: 'block', mt: 0.5, fontStyle: 'italic', color: 'rgba(255, 255, 255, 0.7)' }}>
                                                                                            –ó–∞–º–µ—á–∞–Ω–∏—è: {obj.comments}
                                                                                        </Typography>
                                                                                    )}
                                                                                </Box>
                                                                            </ListItem>
                                                                        );
                                                                    })}
                                                                </List>
                                                            )}
                                                        </Box>
                                                    )}
                                                    {task.location && (
                                                        <Typography variant="body2" sx={{ mt: 1, color: 'rgba(255, 255, 255, 0.7)' }}>
                                                            üìç {task.location.address}
                                                        </Typography>
                                                    )}
                                                </Box>
                                            }
                                        />
                                    </ListItem>
                                    {index < currentTasks.length - 1 && <Divider sx={{ borderColor: 'rgba(255, 255, 255, 0.2)' }} />}
                                </React.Fragment>
                            ))}
                        </List>
                    )}
                </TabPanel>

                <TabPanel value={tabValue} index={1}>
                    {completedTasks.length === 0 ? (
                        <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', textAlign: 'center' }}>
                            –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                        </Typography>
                    ) : (
                        <List>
                            {completedTasks.map((task, index) => (
                                <React.Fragment key={task.id}>
                                    <ListItem sx={{
                                        color: '#ffffff',
                                        border: '2px solid rgba(255, 255, 255, 0.3)',
                                        borderRadius: 2,
                                        mb: 2,
                                        background: 'rgba(255, 255, 255, 0.05)'
                                    }}>
                                        <ListItemIcon>
                                            {getTaskStatusIcon(task.status)}
                                        </ListItemIcon>
                                        <ListItemText
                                            primary={
                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                    <Typography variant="h6" sx={{ color: '#ffffff' }}>
                                                        {task.title}
                                                    </Typography>
                                                    <Chip
                                                        label={getTaskStatusText(task.status)}
                                                        color={getTaskStatusColor(task.status) as any}
                                                        size="small"
                                                        sx={{
                                                            fontWeight: 600,
                                                            '& .MuiChip-label': {
                                                                color: '#ffffff'
                                                            }
                                                        }}
                                                    />
                                                </Box>
                                            }
                                            secondary={
                                                <Box>
                                                    <Typography variant="body2" sx={{ mb: 1, color: 'rgba(255, 255, 255, 0.8)' }}>
                                                        {task.description}
                                                    </Typography>
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                                                            <TimeIcon fontSize="small" sx={{ color: '#ffffff' }} />
                                                            <Typography variant="body2" sx={{ color: '#ffffff' }}>
                                                                –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {task.assignedAt?.toLocaleString('ru-RU') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                            </Typography>
                                                        </Box>
                                                    </Box>
                                                    {task.acceptedAt && (
                                                        <Typography variant="body2" color="success.main">
                                                            ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {task.acceptedAt.toLocaleString('ru-RU')}
                                                        </Typography>
                                                    )}
                                                    {task.completedAt && (
                                                        <Typography variant="body2" color="success.main">
                                                            ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.completedAt.toLocaleString('ru-RU')}
                                                        </Typography>
                                                    )}
                                                    {task.objects && task.objects.length > 0 && (
                                                        <Box sx={{ mt: 2 }}>
                                                            <Typography
                                                                variant="subtitle2"
                                                                sx={{
                                                                    color: '#D4AF37',
                                                                    display: 'block',
                                                                    mb: 1,
                                                                    cursor: 'pointer',
                                                                    fontWeight: 500
                                                                }}
                                                                onClick={() => toggleObjectsExpansion(task.id)}
                                                            >
                                                                üè¢ –û–±—ä–µ–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ({task.objects.length})
                                                            </Typography>
                                                            {expandedObjects[task.id] && (
                                                                <List dense>
                                                                    {task.objects.map((obj: any, objIndex: number) => {
                                                                        const checkedDate = obj.checkedAt instanceof Date && !isNaN(obj.checkedAt.getTime())
                                                                            ? obj.checkedAt
                                                                            : (typeof obj.checkedAt === 'string' ? new Date(obj.checkedAt) : null);
                                                                        const isValidChecked = checkedDate instanceof Date && !isNaN(checkedDate.getTime());
                                                                        return (
                                                                            <ListItem key={objIndex} sx={{
                                                                                alignItems: 'flex-start',
                                                                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                                                                borderRadius: 1,
                                                                                mb: 1,
                                                                                background: 'rgba(255, 255, 255, 0.03)'
                                                                            }}>
                                                                                <ListItemIcon>
                                                                                    <LocationIcon fontSize="small" sx={{ color: '#ffffff' }} />
                                                                                </ListItemIcon>
                                                                                <Box sx={{ width: '100%' }}>
                                                                                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                                                                        <Typography component="span" sx={{ fontWeight: 500, color: '#ffffff' }}>
                                                                                            {obj.name || obj.address}
                                                                                        </Typography>
                                                                                        {obj.status === 'checked' ? (
                                                                                            <Chip label="–ü—Ä–æ–≤–µ—Ä–µ–Ω" color="success" size="small" sx={{
                                                                                                fontWeight: 600,
                                                                                                '& .MuiChip-label': {
                                                                                                    color: '#ffffff'
                                                                                                }
                                                                                            }} />
                                                                                        ) : (
                                                                                            <Chip label="–û–∂–∏–¥–∞–µ—Ç" color="warning" size="small" sx={{
                                                                                                fontWeight: 600,
                                                                                                '& .MuiChip-label': {
                                                                                                    color: '#ffffff'
                                                                                                }
                                                                                            }} />
                                                                                        )}
                                                                                    </Box>
                                                                                    <Typography variant="body2" component="span" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                                                                                        {obj.address}
                                                                                    </Typography>
                                                                                    {obj.status === 'checked' && isValidChecked && (
                                                                                        <Typography variant="body2" color="success.main" component="span" sx={{ display: 'block', mt: 0.5 }}>
                                                                                            ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: {checkedDate.toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}
                                                                                        </Typography>
                                                                                    )}
                                                                                    {obj.comments && (
                                                                                        <Typography variant="body2" color="text.secondary" component="span" sx={{ display: 'block', mt: 0.5, fontStyle: 'italic', color: 'rgba(255, 255, 255, 0.7)' }}>
                                                                                            –ó–∞–º–µ—á–∞–Ω–∏—è: {obj.comments}
                                                                                        </Typography>
                                                                                    )}
                                                                                </Box>
                                                                            </ListItem>
                                                                        );
                                                                    })}
                                                                </List>
                                                            )}
                                                        </Box>
                                                    )}
                                                    {task.location && (
                                                        <Typography variant="caption" display="block" sx={{ mt: 1, color: 'rgba(255, 255, 255, 0.7)' }}>
                                                            üìç {task.location.address}
                                                        </Typography>
                                                    )}
                                                </Box>
                                            }
                                        />
                                    </ListItem>
                                    {index < completedTasks.length - 1 && <Divider sx={{ borderColor: 'rgba(255, 255, 255, 0.2)' }} />}
                                </React.Fragment>
                            ))}
                        </List>
                    )}
                </TabPanel>
            </Box>

            {/* Snackbar –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            <Snackbar
                open={snackbar.open}
                autoHideDuration={6000}
                onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
            >
                <Alert
                    severity={snackbar.severity}
                    onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
                    sx={{
                        '& .MuiAlert-message': {
                            color: '#000'
                        }
                    }}
                >
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </Box >
    );
};

export default InspectorProfile; 