/**
 * @file: CuratorPanel.tsx
 * @description: –ü–∞–Ω–µ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∞–º–∏
 * @dependencies: react, material-ui, auth context, objects service, alerts service
 * @created: 2025-06-27
 */

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
    Box,
    Typography,
    Card,
    CardContent,
    Button,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField,
    IconButton,
    Chip,
    Alert,
    Snackbar,
    CircularProgress
} from '@mui/material';

import {
    Warning as WarningIcon,
    WarningAmber as WarningAmberIcon,
    LocationOn as LocationIcon,
    Security as SecurityIcon,
    MoreVert as MoreVertIcon,
    Assignment as AssignmentIcon
} from '@mui/icons-material';
import { useAuth } from '../../context/AuthContext';
import { Curator, ObjectData, Alert as AlertType, Task } from '../../types';
import { getCuratorById } from '../../services/auth';
import { createAlert, subscribeActiveAlert, resetAlert } from '../../services/alerts';
import { stopAlarm } from '../../services/alarmSound';
import Header from '../common/Header';
import InspectorBottomNavigation from '../common/BottomNavigation';
import { cacheManager } from '../../services/cache';

const CuratorPanel = () => {
    const navigate = useNavigate();
    const { user } = useAuth();
    const [curator, setCurator] = useState<Curator | null>(null);
    const [objects, setObjects] = useState<ObjectData[]>([]);
    const [tasks, setTasks] = useState<Task[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [alarmDialog, setAlarmDialog] = useState(false);
    const [selectedObject, setSelectedObject] = useState<ObjectData | null>(null);
    const [alarmDescription, setAlarmDescription] = useState('');
    const [activeAlert, setActiveAlert] = useState<AlertType | null>(null);
    const [showAlarm, setShowAlarm] = useState(false);
    const [alarmDismissed, setAlarmDismissed] = useState(false);
    const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({
        open: false,
        message: '',
        severity: 'success'
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ alarmDismissed –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const savedDismissed = localStorage.getItem('curatorAlarmDismissed');
        console.log('üîç CuratorPanel: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage:', savedDismissed);
        if (savedDismissed === 'true') {
            setAlarmDismissed(true);
            console.log('‚úÖ CuratorPanel: –°–æ—Å—Ç–æ—è–Ω–∏–µ alarmDismissed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true');
        }
    }, []);

    useEffect(() => {
        if (user?.uid) {
            loadCuratorData();
        }
    }, [user?.uid]);

    // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    useEffect(() => {
        if (user?.uid && curator) {
            console.log('üîÑ CuratorPanel: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º real-time –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞:', user.uid);

            let currentObjects: ObjectData[] = [];

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            const unsubscribeObjects = cacheManager.subscribeToObjects((updatedObjects) => {
                console.log('üì¶ CuratorPanel: –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', updatedObjects.length);
                currentObjects = updatedObjects;

                // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                const curatorObjects = updatedObjects.filter(obj =>
                    curator.assignedObjects.includes(obj.id)
                );
                console.log('üè¢ CuratorPanel: –û–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', curatorObjects.length);
                setObjects(curatorObjects);
            });

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            const unsubscribeCurators = cacheManager.subscribeToCurators((updatedCurators) => {
                console.log('üë• CuratorPanel: –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä—ã:', updatedCurators.length);
                const currentCurator = updatedCurators.find(c => c.uid === user.uid);
                if (currentCurator) {
                    console.log('‚úÖ CuratorPanel: –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:', {
                        uid: currentCurator.uid,
                        assignedObjectsCount: currentCurator.assignedObjects.length,
                        assignedObjects: currentCurator.assignedObjects
                    });
                    setCurator(currentCurator);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    const curatorObjects = currentObjects.filter(obj =>
                        currentCurator.assignedObjects.includes(obj.id)
                    );
                    console.log('üè¢ CuratorPanel: –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:', curatorObjects.length);
                    setObjects(curatorObjects);
                }
            });

            return () => {
                console.log('üîÑ CuratorPanel: –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç real-time –ø–æ–¥–ø–∏—Å–æ–∫');
                if (unsubscribeObjects) unsubscribeObjects();
                if (unsubscribeCurators) unsubscribeCurators();
            };
        }
    }, [user?.uid, curator?.uid]); // –ò–∑–º–µ–Ω–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

    useEffect(() => {
        if (user) {
            const unsub = subscribeActiveAlert((alert) => {
                console.log('üö® CuratorPanel: –ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–µ–≤–æ–≥–∞:', alert);
                setActiveAlert(alert);
                setShowAlarm(!!alert);
                // –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (!alert) {
                    console.log('üîÑ CuratorPanel: –¢—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                    setAlarmDismissed(false);
                    localStorage.removeItem('curatorAlarmDismissed');
                }
            }, user);
            return () => unsub();
        }
    }, [user]);

    const loadCuratorData = async () => {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞...');
            setLoading(true);
            if (!user?.uid) {
                console.log('‚ùå UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.uid);

            const [curatorData, allObjects] = await Promise.all([
                getCuratorById(user.uid),
                cacheManager.getObjects()
            ]);

            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
                curatorData: curatorData ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                allObjectsCount: allObjects.length
            });

            if (curatorData) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                    uid: curatorData.uid,
                    name: curatorData.name,
                    assignedObjectsCount: curatorData.assignedObjects.length,
                    assignedObjects: curatorData.assignedObjects
                });

                setCurator(curatorData);

                // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
                const curatorObjects = allObjects.filter(obj =>
                    curatorData.assignedObjects.includes(obj.id)
                );

                console.log('üè¢ –û–±—ä–µ–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞:', {
                    totalObjects: allObjects.length,
                    curatorObjectsCount: curatorObjects.length,
                    curatorObjectIds: curatorObjects.map(obj => obj.id)
                });

                setObjects(curatorObjects);
            } else {
                console.log('‚ùå –î–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                setError('–î–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞:', err);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            setLoading(false);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞
    useEffect(() => {
        console.log('üîÑ useEffect –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å—Ä–∞–±–æ—Ç–∞–ª, objects.length:', objects.length);

        if (objects.length > 0) {
            const objectIds = objects.map(obj => obj.id);
            console.log('üìã ID –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è:', objectIds);

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–¥–∞–Ω–∏–π
            cacheManager.refreshCache('tasks');

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞
            const unsubscribe = cacheManager.subscribeToCuratorObjectsTasks(objectIds, (curatorTasks) => {
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞:', curatorTasks.length);
                setTasks(curatorTasks);
            });

            return () => {
                console.log('üîÑ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä–∞');
                unsubscribe();
            };
        } else {
            console.log('üìã –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è');
        }
    }, [objects]);

    const handleAlarm = (object: ObjectData) => {
        setSelectedObject(object);
        setAlarmDialog(true);
    };

    const confirmAlarm = async () => {
        if (!user || !selectedObject) return;
        try {
            await createAlert({
                type: 'curator',
                userId: user.uid,
                userName: user.name,
                objectId: selectedObject.id,
                objectName: selectedObject.name,
                description: alarmDescription,
                coordinates: selectedObject.position
            });
            setAlarmDialog(false);
            setSelectedObject(null);
            setAlarmDescription('');
            showSnackbar('–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏:', err);
            showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–≤–æ–≥–∏', 'error');
        }
    };

    const handleObjectClick = (object: ObjectData) => {
        navigate(`/curator/object/${object.id}`);
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'active': return 'success';
            case 'inactive': return 'error';
            case 'maintenance': return 'warning';
            default: return 'default';
        }
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
            case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
            case 'maintenance': return '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏';
            default: return status;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–≤–æ–µ > –≤ —Ä–∞–±–æ—Ç–µ > –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ)
    const getLastIncompleteTask = (objectId: string) => {
        const objectTasks = tasks.filter(task => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ objectIds (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –ø–æ objects
            if (task.objectIds && task.objectIds.length > 0) {
                return task.objectIds.includes(objectId);
            }
            return task.objects.some(obj => obj.id === objectId);
        });

        if (objectTasks.length === 0) return null;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: pending > in_progress > completed
        const sortedTasks = objectTasks.sort((a, b) => {
            const priority = { 'pending': 3, 'in_progress': 2, 'completed': 1 };
            const aPriority = priority[a.status] || 0;
            const bPriority = priority[b.status] || 0;

            if (aPriority !== bPriority) {
                return bPriority - aPriority; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–Ω–∞—á–∞–ª–∞
            }

            // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            return b.createdAt.getTime() - a.createdAt.getTime();
        });

        return sortedTasks[0];
    };

    const handleDismissAlarm = () => {
        console.log('üîô CuratorPanel: –°–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (—Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)');
        setAlarmDismissed(true);
        localStorage.setItem('curatorAlarmDismissed', 'true');
        stopAlarm(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Ç—Ä–µ–≤–æ–≥–∏
        console.log('üíæ CuratorPanel: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
        console.log('üîá CuratorPanel: –ó–≤—É–∫ —Ç—Ä–µ–≤–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    };

    const handleNavigate = (page: string) => {
        if (page === 'home') {
            navigate('/');
        } else if (page === 'object' && activeAlert?.objectId) {
            navigate(`/object/${activeAlert.objectId}`);
        }
    };

    const showSnackbar = (message: string, severity: 'success' | 'error') => {
        setSnackbar({ open: true, message, severity });
    };

    console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ CuratorPanel:', {
        loading,
        error,
        curator: curator ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
        objectsCount: objects.length,
        tasksCount: tasks.length
    });

    if (loading) {
        console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
        return (
            <Box sx={{ p: 3, display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>
                <CircularProgress />
            </Box>
        );
    }

    if (error || !curator) {
        console.log('‚ùå –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', { error, curator: curator ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return (
            <Box sx={{ p: 3 }}>
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error || '–î–∞–Ω–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </Alert>
            </Box>
        );
    }

    console.log('üîç CuratorPanel: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', { activeAlert: !!activeAlert, alarmDismissed, showAlarm });

    return (
        <Box sx={{ minHeight: '100vh', background: 'linear-gradient(135deg, #0A2463 0%, #000 100%)' }}>
            {showAlarm && !alarmDismissed && (
                <Box sx={{
                    position: 'fixed',
                    zIndex: 2000,
                    top: 0,
                    left: 0,
                    width: '100vw',
                    height: '100vh',
                    bgcolor: 'rgba(255,0,0,0.8)',
                    animation: 'alarm-blink 1s steps(2, start) infinite',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                }}>
                    <Typography variant="h3" sx={{ color: '#fff', mb: 2, fontWeight: 700 }}>
                        –¢–†–ï–í–û–ì–ê!
                    </Typography>
                    <Typography variant="h5" sx={{ color: '#fff', mb: 2, textAlign: 'center' }}>
                        {activeAlert?.type === 'admin' ? '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : activeAlert?.objectName ? `–¢—Ä–µ–≤–æ–≥–∞ —Å –æ–±—ä–µ–∫—Ç–∞: ${activeAlert.objectName}` : '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞'}
                    </Typography>
                    {activeAlert?.objectName && (
                        <Typography variant="h6" sx={{ color: '#fff', mb: 1, textAlign: 'center' }}>
                            –û–±—ä–µ–∫—Ç: {activeAlert.objectName}
                        </Typography>
                    )}
                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', justifyContent: 'center' }}>
                        {activeAlert?.objectId && (
                            <Button
                                variant="contained"
                                color="primary"
                                onClick={() => {
                                    stopAlarm();
                                    navigate(`/object/${activeAlert.objectId}`);
                                }}
                                sx={{ fontWeight: 700 }}
                            >
                                –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä–µ–∫—Ç—É
                            </Button>
                        )}
                        <Button variant="contained" color="inherit" onClick={handleDismissAlarm} sx={{ fontWeight: 700 }}>
                            –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É
                        </Button>
                    </Box>
                </Box>
            )}

            {/* –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–≤–æ–≥–µ */}
            {alarmDismissed && activeAlert ? (
                <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
                    {/* –ö—Ä–∞—Å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–≤–æ–≥–µ */}
                    <Box
                        sx={{
                            bgcolor: 'error.main',
                            color: 'error.contrastText',
                            p: 2,
                            textAlign: 'center',
                            borderBottom: '2px solid #fff'
                        }}
                    >
                        <Typography variant="h6" fontWeight="bold">
                            üö® –ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–í–û–ì–ê
                        </Typography>
                        <Typography variant="body2">
                            {activeAlert.type === 'admin' ? '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' :
                                activeAlert.objectName ? `–¢—Ä–µ–≤–æ–≥–∞ —Å –æ–±—ä–µ–∫—Ç–∞: ${activeAlert.objectName}` :
                                    '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞'}
                        </Typography>
                        {activeAlert.objectName && (
                            <Typography variant="body2">
                                –û–±—ä–µ–∫—Ç: {activeAlert.objectName}
                            </Typography>
                        )}
                    </Box>

                    {/* –®–∞–ø–∫–∞ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∫—É—Ä–∞—Ç–æ—Ä–∞ */}
                    <Header
                        title="–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã"
                        hideCompanyName={true}
                        hideTitle={true}
                        hideUserName={true}
                        showProfileMenu={true}
                        onProfileClick={() => navigate('/curator/profile')}
                        onLogoClick={() => navigate('/')}
                    />

                    {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                    <Box sx={{ flex: 1, overflow: 'auto', p: 3 }}>
                        <Typography variant="h4" component="h1" sx={{ color: 'white', mb: 3 }}>
                            –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã
                        </Typography>

                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                            {objects.map((object) => {
                                const lastTask = getLastIncompleteTask(object.id);
                                return (
                                    <Card
                                        key={object.id}
                                        sx={{
                                            width: '100%',
                                            cursor: 'pointer',
                                            boxShadow: 2,
                                            transition: 'all 0.3s ease',
                                            '&:hover': {
                                                boxShadow: 8,
                                                transform: 'translateY(-2px)',
                                            },
                                            display: 'flex',
                                            flexDirection: 'column',
                                            p: 2,
                                        }}
                                        onClick={() => handleObjectClick(object)}
                                    >
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                                            <Box sx={{ flex: 1 }}>
                                                <Typography
                                                    variant="h6"
                                                    sx={{
                                                        fontWeight: 600,
                                                        textAlign: 'left',
                                                        mb: 1,
                                                        fontSize: '1.1rem',
                                                    }}
                                                >
                                                    {object.name}
                                                </Typography>
                                                <Typography
                                                    variant="body2"
                                                    sx={{
                                                        color: 'text.secondary',
                                                        textAlign: 'left',
                                                        mb: 1,
                                                    }}
                                                >
                                                    {object.address}
                                                </Typography>
                                                <Chip
                                                    label={getStatusText(object.status)}
                                                    color={getStatusColor(object.status)}
                                                    size="small"
                                                    sx={{ mr: 1 }}
                                                />
                                                {lastTask && (
                                                    <Chip
                                                        label={`–ó–∞–¥–∞—á–∞: ${lastTask.title}`}
                                                        color="warning"
                                                        size="small"
                                                    />
                                                )}
                                            </Box>
                                            <IconButton
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    handleAlarm(object);
                                                }}
                                                sx={{
                                                    bgcolor: 'error.main',
                                                    color: 'white',
                                                    '&:hover': {
                                                        bgcolor: 'error.dark',
                                                    },
                                                }}
                                            >
                                                <WarningIcon />
                                            </IconButton>
                                        </Box>
                                    </Card>
                                );
                            })}
                        </Box>
                    </Box>

                    {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                    <InspectorBottomNavigation
                        currentPage="home"
                        onNavigate={handleNavigate}
                        showObject={true}
                    />
                </Box>
            ) : (
                <>
                    <Header
                        title="–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã"
                        hideCompanyName={true}
                        hideTitle={true}
                        hideUserName={true}
                        showProfileMenu={true}
                        onProfileClick={() => navigate('/curator/profile')}
                        onLogoClick={() => navigate('/')}
                    />

                    <Box sx={{ p: 3 }}>
                        <Typography variant="h4" component="h1" sx={{ color: 'white', mb: 3 }}>
                            –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã
                        </Typography>

                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                            {objects.map((object) => {
                                const lastTask = getLastIncompleteTask(object.id);
                                return (
                                    <Card
                                        key={object.id}
                                        sx={{
                                            width: '100%',
                                            cursor: 'pointer',
                                            boxShadow: 2,
                                            transition: 'all 0.3s ease',
                                            '&:hover': {
                                                boxShadow: 8,
                                                transform: 'translateY(-2px)',
                                            },
                                            display: 'flex',
                                            flexDirection: 'column',
                                            p: 2,
                                        }}
                                        onClick={() => handleObjectClick(object)}
                                    >
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                                            <Box sx={{ flex: 1 }}>
                                                <Typography
                                                    variant="h6"
                                                    sx={{
                                                        fontWeight: 600,
                                                        textAlign: 'left',
                                                        mb: 1,
                                                        fontSize: '1.1rem',
                                                    }}
                                                >
                                                    {object.name}
                                                </Typography>

                                                <Typography
                                                    variant="body2"
                                                    color="text.secondary"
                                                    sx={{
                                                        fontSize: '0.9rem',
                                                        textAlign: 'left',
                                                        mb: 1,
                                                    }}
                                                >
                                                    {object.address}
                                                </Typography>

                                                <Typography
                                                    variant="body2"
                                                    color="text.secondary"
                                                    sx={{
                                                        fontSize: '0.8rem',
                                                        textAlign: 'left',
                                                        mb: 1,
                                                        display: '-webkit-box',
                                                        WebkitLineClamp: 2,
                                                        WebkitBoxOrient: 'vertical',
                                                        overflow: 'hidden',
                                                        lineHeight: '1.3em',
                                                        height: '2.6em'
                                                    }}
                                                >
                                                    {object.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                                                </Typography>
                                            </Box>

                                            <IconButton
                                                size="medium"
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    handleAlarm(object);
                                                }}
                                                sx={{
                                                    backgroundColor: 'rgba(244, 67, 54, 0.1)',
                                                    color: '#f44336',
                                                    '&:hover': {
                                                        backgroundColor: 'rgba(244, 67, 54, 0.2)',
                                                        color: '#d32f2f'
                                                    }
                                                }}
                                            >
                                                <WarningIcon fontSize="medium" />
                                            </IconButton>
                                        </Box>

                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 'auto' }}>
                                            <Chip
                                                label={getStatusText(object.status)}
                                                color={getStatusColor(object.status) as any}
                                                size="small"
                                            />
                                            {lastTask && (
                                                <Typography
                                                    variant="caption"
                                                    color="text.secondary"
                                                    sx={{ fontSize: '0.8rem' }}
                                                >
                                                    {lastTask.status === 'pending' ? '–ù–æ–≤–æ–µ' :
                                                        lastTask.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}: {lastTask.createdAt.toLocaleDateString('ru-RU')} {lastTask.createdAt.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                                                </Typography>
                                            )}
                                        </Box>
                                    </Card>
                                );
                            })}
                        </Box>
                    </Box>

                    {/* –î–∏–∞–ª–æ–≥ —Ç—Ä–µ–≤–æ–≥–∏ */}
                    <Dialog open={alarmDialog} onClose={() => setAlarmDialog(false)} maxWidth="sm" fullWidth>
                        <DialogTitle>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É</DialogTitle>
                        <DialogContent>
                            <Typography sx={{ mb: 2 }}>
                                –û–±—ä–µ–∫—Ç: {selectedObject?.name}
                            </Typography>
                            <TextField
                                fullWidth
                                label="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏"
                                multiline
                                rows={3}
                                value={alarmDescription}
                                onChange={(e) => setAlarmDescription(e.target.value)}
                            />
                        </DialogContent>
                        <DialogActions>
                            <Button onClick={() => setAlarmDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
                            <Button onClick={confirmAlarm} variant="contained" color="error">
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É
                            </Button>
                        </DialogActions>
                    </Dialog>

                    <Snackbar
                        open={snackbar.open}
                        autoHideDuration={6000}
                        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
                    >
                        <Alert
                            onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
                            severity={snackbar.severity}
                        >
                            {snackbar.message}
                        </Alert>
                    </Snackbar>
                </>
            )}
        </Box>
    );
};

export default CuratorPanel; 