import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Button,
    Card,
    CardContent,
    Chip,
    IconButton,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Alert,
    CircularProgress
} from '@mui/material';
import {
    Warning,
    LocationOn,
    Directions,
    Close,
    Phone,
    AccessTime,
    Navigation
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import YandexMap from '../maps/YandexMap';
import { getObjectById } from '../../services/objects';
import { SecurityObject } from '../../types';
import InspectorBottomNavigation from '../common/BottomNavigation';
import Header from '../common/Header';
import { subscribeActiveAlert } from '../../services/alerts';
import { Alert as AlertType } from '../../types';
import { stopAlarm } from '../../services/alarmSound';

export const AlarmScreen: React.FC = () => {
    const navigate = useNavigate();
    const { user } = useAuth();
    const { objectId } = useParams<{ objectId: string }>();
    const [object, setObject] = useState<SecurityObject | null>(null);
    const [loading, setLoading] = useState(true);
    const [showMap, setShowMap] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [showAlarmMessage, setShowAlarmMessage] = useState(true);
    const [alarmDismissed, setAlarmDismissed] = useState(false);
    const [activeAlert, setActiveAlert] = useState<AlertType | null>(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ alarmDismissed –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const savedDismissed = localStorage.getItem('alarmDismissed');
        console.log('üîç AlarmScreen: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage:', savedDismissed);
        if (savedDismissed === 'true') {
            setAlarmDismissed(true);
            console.log('‚úÖ AlarmScreen: –°–æ—Å—Ç–æ—è–Ω–∏–µ alarmDismissed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true');
        }
    }, []);

    useEffect(() => {
        console.log('üö® AlarmScreen –∑–∞–≥—Ä—É–∂–µ–Ω, objectId:', objectId);
        console.log('üìç –¢–µ–∫—É—â–∏–π URL:', window.location.pathname);

        if (objectId) {
            loadObject();
        } else {
            // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
            setLoading(false);
            console.log('‚ö†Ô∏è –¢—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞');
        }

        // –ú–µ—Ä—Ü–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–≥–µ
        const blinkInterval = setInterval(() => {
            setShowAlarmMessage(prev => !prev);
        }, 500);

        return () => clearInterval(blinkInterval);
    }, [objectId]);

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
    useEffect(() => {
        if (user) {
            const unsub = subscribeActiveAlert((alert) => {
                setActiveAlert(alert);
                // –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (!alert) {
                    setAlarmDismissed(false);
                    localStorage.removeItem('alarmDismissed');
                }
            }, user);
            return () => unsub();
        }
    }, [user]);

    const loadObject = async () => {
        try {
            setLoading(true);
            const objectData = await getObjectById(objectId!);
            if (objectData) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectData –≤ SecurityObject
                const securityObject: SecurityObject = {
                    id: objectData.id,
                    name: objectData.name,
                    address: objectData.address,
                    city: '',
                    coordinates: {
                        lat: objectData.position[0],
                        lng: objectData.position[1]
                    },
                    type: 'office',
                    securityLevel: 'high',
                    status: objectData.status,
                    description: objectData.description
                };
                setObject(securityObject);
            } else {
                setError('–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞');
        } finally {
            setLoading(false);
        }
    };

    const handleNavigateToObject = () => {
        if (object) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
            const { lat, lng } = object.coordinates;
            const url = `yandexnavi://build_route_on_map?lat_to=${lat}&lon_to=${lng}`;

            // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            window.location.href = url;

            // Fallback –Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                const webUrl = `https://yandex.ru/maps/?pt=${lng},${lat}&z=16&l=map&rtext=~${lat},${lng}`;
                window.open(webUrl, '_blank');
            }, 1000);
        }
    };

    const handleCallEmergency = () => {
        // –ù–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã
        window.location.href = 'tel:112';
    };

    const handleDismissAlarm = () => {
        console.log('üîô –°–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (—Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)');
        setAlarmDismissed(true);
        localStorage.setItem('alarmDismissed', 'true');
        stopAlarm(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Ç—Ä–µ–≤–æ–≥–∏
        console.log('üîá –ó–≤—É–∫ —Ç—Ä–µ–≤–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    };

    const handleNavigate = (page: string) => {
        if (page === 'home') {
            navigate('/');
        } else if (page === 'object' && objectId) {
            navigate(`/object/${objectId}`);
        }
    };

    console.log('üîç AlarmScreen: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', { activeAlert: !!activeAlert, alarmDismissed, loading, error });

    // –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (!activeAlert) {
        console.log('üì± AlarmScreen: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¢—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞"');
        return (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
                <Typography variant="h6">–¢—Ä–µ–≤–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞</Typography>
            </Box>
        );
    }

    if (loading) {
        return (
            <Box
                display="flex"
                justifyContent="center"
                alignItems="center"
                minHeight="100vh"
                bgcolor="error.main"
            >
                <CircularProgress color="inherit" />
            </Box>
        );
    }

    if (error) {
        return (
            <Box
                display="flex"
                flexDirection="column"
                justifyContent="center"
                alignItems="center"
                minHeight="100vh"
                bgcolor="error.main"
                color="error.contrastText"
                p={3}
            >
                <Warning sx={{ fontSize: 64, mb: 2 }} />
                <Typography variant="h4" gutterBottom>
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                </Typography>
                <Typography variant="body1" textAlign="center" mb={3}>
                    {error}
                </Typography>
                <Button
                    variant="contained"
                    color="inherit"
                    onClick={() => navigate('/')}
                >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                </Button>
            </Box>
        );
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–≤–æ–≥–µ
    if (alarmDismissed) {
        console.log('üì± AlarmScreen: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫—Ä–∞—Å–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é');
        return (
            <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
                {/* –ö—Ä–∞—Å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–≤–æ–≥–µ */}
                <Box
                    sx={{
                        bgcolor: 'error.main',
                        color: 'error.contrastText',
                        p: 2,
                        textAlign: 'center',
                        borderBottom: '2px solid #fff'
                    }}
                >
                    <Typography variant="h6" fontWeight="bold">
                        üö® –ê–ö–¢–ò–í–ù–ê–Ø –¢–†–ï–í–û–ì–ê
                    </Typography>
                    <Typography variant="body2">
                        {activeAlert.type === 'admin' ? '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' :
                            activeAlert.objectName ? `–¢—Ä–µ–≤–æ–≥–∞ —Å –æ–±—ä–µ–∫—Ç–∞: ${activeAlert.objectName}` :
                                '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞'}
                    </Typography>
                    {activeAlert.objectName && (
                        <Typography variant="body2">
                            –û–±—ä–µ–∫—Ç: {activeAlert.objectName}
                        </Typography>
                    )}
                </Box>

                {/* –®–∞–ø–∫–∞ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ */}
                <Header
                    title="–ü–∞–Ω–µ–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞"
                    hideCompanyName={true}
                    hideTitle={true}
                    hideUserName={true}
                    showProfileMenu={true}
                    onProfileClick={() => navigate('/inspector/profile')}
                    onLogoClick={() => navigate('/')}
                />

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <Box sx={{ flex: 1, overflow: 'auto', p: 3 }}>
                    <Card sx={{ mb: 3 }}>
                        <CardContent>
                            <Typography variant="h5" gutterBottom>
                                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–≤–æ–≥–µ
                            </Typography>
                            <Typography variant="body1" mb={2}>
                                –¢—Ä–µ–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—è–º.
                            </Typography>
                            <Box display="flex" alignItems="center" gap={1}>
                                <AccessTime />
                                <Typography variant="body2">
                                    –ü–æ–ª—É—á–µ–Ω–∞: {new Date().toLocaleTimeString()}
                                </Typography>
                            </Box>
                        </CardContent>
                    </Card>

                    {object && (
                        <Card sx={{ mb: 3 }}>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
                                </Typography>
                                <Typography variant="h5" gutterBottom fontWeight="bold">
                                    {object.name}
                                </Typography>
                                <Box display="flex" alignItems="center" gap={1} mb={2}>
                                    <LocationOn />
                                    <Typography variant="body1">
                                        {object.address}
                                    </Typography>
                                </Box>
                                <Box display="flex" gap={1} mb={2}>
                                    <Chip
                                        label={`–£—Ä–æ–≤–µ–Ω—å: ${object.securityLevel}`}
                                        color="warning"
                                        variant="filled"
                                    />
                                    <Chip
                                        label={object.type}
                                        color="info"
                                        variant="filled"
                                    />
                                </Box>
                            </CardContent>
                        </Card>
                    )}

                    <Box display="flex" flexDirection="column" gap={2}>
                        {object && (
                            <>
                                <Button
                                    variant="contained"
                                    color="warning"
                                    size="large"
                                    startIcon={<Navigation />}
                                    onClick={handleNavigateToObject}
                                    sx={{ py: 2, fontSize: '1.1rem' }}
                                >
                                    –ù–∞–≤–∏–≥–∞—Ü–∏—è
                                </Button>

                                <Button
                                    variant="contained"
                                    color="info"
                                    size="large"
                                    startIcon={<LocationOn />}
                                    onClick={() => setShowMap(true)}
                                    sx={{ py: 2, fontSize: '1.1rem' }}
                                >
                                    –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
                                </Button>
                            </>
                        )}

                        <Button
                            variant="contained"
                            color="secondary"
                            size="large"
                            startIcon={<Phone />}
                            onClick={handleCallEmergency}
                            sx={{ py: 2, fontSize: '1.1rem' }}
                        >
                            –í—ã–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É
                        </Button>
                    </Box>
                </Box>

                {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                <InspectorBottomNavigation
                    currentPage="object"
                    onNavigate={handleNavigate}
                />

                {/* –î–∏–∞–ª–æ–≥ —Å –∫–∞—Ä—Ç–æ–π */}
                {object && (
                    <Dialog
                        open={showMap}
                        onClose={() => setShowMap(false)}
                        maxWidth="lg"
                        fullWidth
                        PaperProps={{
                            style: {
                                height: '80vh',
                                maxHeight: '80vh'
                            }
                        }}
                    >
                        <DialogTitle>
                            <Box display="flex" alignItems="center" justifyContent="space-between">
                                <Typography variant="h6">
                                    –ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–∞: {object.name}
                                </Typography>
                                <IconButton onClick={() => setShowMap(false)}>
                                    <Close />
                                </IconButton>
                            </Box>
                        </DialogTitle>
                        <DialogContent>
                            <Box height="100%" position="relative">
                                <YandexMap
                                    center={[object.coordinates.lat, object.coordinates.lng]}
                                    zoom={16}
                                    markers={[
                                        {
                                            id: object.id,
                                            position: [object.coordinates.lat, object.coordinates.lng],
                                            title: object.name
                                        }
                                    ]}
                                />
                            </Box>
                        </DialogContent>
                        <DialogActions>
                            <Button
                                onClick={handleNavigateToObject}
                                variant="contained"
                                color="primary"
                                startIcon={<Navigation />}
                            >
                                –ù–∞–≤–∏–≥–∞—Ü–∏—è
                            </Button>
                            <Button onClick={() => setShowMap(false)}>
                                –ó–∞–∫—Ä—ã—Ç—å
                            </Button>
                        </DialogActions>
                    </Dialog>
                )}
            </Box>
        );
    }

    console.log('üì± AlarmScreen: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –º–µ—Ä—Ü–∞–Ω–∏–µ–º');
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –º–µ—Ä—Ü–∞–Ω–∏–µ–º
    return (
        <Box
            minHeight="100vh"
            bgcolor="error.main"
            color="error.contrastText"
            position="relative"
        >
            {/* –ú–µ—Ä—Ü–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–≤–æ–≥–µ */}
            {showAlarmMessage && !alarmDismissed && (
                <Box
                    position="fixed"
                    top={0}
                    left={0}
                    right={0}
                    bottom={0}
                    zIndex={2000}
                    bgcolor="error.dark"
                    display="flex"
                    alignItems="center"
                    justifyContent="center"
                    sx={{
                        animation: 'blink 0.5s ease-in-out infinite alternate'
                    }}
                >
                    <Typography
                        variant="h2"
                        fontWeight="bold"
                        textAlign="center"
                        sx={{
                            textShadow: '2px 2px 4px rgba(0,0,0,0.5)',
                            fontSize: { xs: '2rem', sm: '3rem', md: '4rem' }
                        }}
                    >
                        üö® –¢–†–ï–í–û–ì–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú üö®
                    </Typography>
                </Box>
            )}

            {/* –®–∞–ø–∫–∞ –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ */}
            <Header
                title="–ü–∞–Ω–µ–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞"
                hideCompanyName={true}
                hideTitle={true}
                hideUserName={true}
                showProfileMenu={true}
                onProfileClick={() => navigate('/inspector/profile')}
                onLogoClick={() => navigate('/')}
            />

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <Box p={3}>
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                <Card
                    sx={{
                        bgcolor: 'error.dark',
                        color: 'error.contrastText',
                        mb: 3,
                        border: 2,
                        borderColor: 'error.light'
                    }}
                >
                    <CardContent>
                        {object ? (
                            <>
                                <Typography variant="h4" gutterBottom fontWeight="bold">
                                    {object.name}
                                </Typography>

                                <Box display="flex" alignItems="center" gap={1} mb={2}>
                                    <LocationOn />
                                    <Typography variant="body1">
                                        {object.address}
                                    </Typography>
                                </Box>

                                <Box display="flex" gap={1} mb={2}>
                                    <Chip
                                        label={`–£—Ä–æ–≤–µ–Ω—å: ${object.securityLevel}`}
                                        color="warning"
                                        variant="filled"
                                    />
                                    <Chip
                                        label={object.type}
                                        color="info"
                                        variant="filled"
                                    />
                                </Box>

                                {object.description && (
                                    <Typography variant="body2" mb={2}>
                                        {object.description}
                                    </Typography>
                                )}
                            </>
                        ) : (
                            <>
                                <Typography variant="h4" gutterBottom fontWeight="bold">
                                    –û–±—â–∞—è —Ç—Ä–µ–≤–æ–≥–∞
                                </Typography>
                                <Typography variant="body1" mb={2}>
                                    –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–≤–æ–≥–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                                </Typography>
                            </>
                        )}

                        <Box display="flex" alignItems="center" gap={1}>
                            <AccessTime />
                            <Typography variant="body2">
                                –¢—Ä–µ–≤–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {new Date().toLocaleTimeString()}
                            </Typography>
                        </Box>
                    </CardContent>
                </Card>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <Box display="flex" flexDirection="column" gap={2}>
                    {object ? (
                        <>
                            <Button
                                variant="contained"
                                color="warning"
                                size="large"
                                startIcon={<Navigation />}
                                onClick={handleNavigateToObject}
                                sx={{ py: 2, fontSize: '1.1rem' }}
                            >
                                –ù–∞–≤–∏–≥–∞—Ü–∏—è
                            </Button>

                            <Button
                                variant="contained"
                                color="info"
                                size="large"
                                startIcon={<LocationOn />}
                                onClick={() => setShowMap(true)}
                                sx={{ py: 2, fontSize: '1.1rem' }}
                            >
                                –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
                            </Button>
                        </>
                    ) : (
                        <Button
                            variant="contained"
                            color="info"
                            size="large"
                            startIcon={<LocationOn />}
                            onClick={() => navigate('/inspector')}
                            sx={{ py: 2, fontSize: '1.1rem' }}
                        >
                            –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º
                        </Button>
                    )}

                    <Button
                        variant="contained"
                        color="secondary"
                        size="large"
                        startIcon={<Phone />}
                        onClick={handleCallEmergency}
                        sx={{ py: 2, fontSize: '1.1rem' }}
                    >
                        –í—ã–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É
                    </Button>

                    <Button
                        variant="contained"
                        color="inherit"
                        size="large"
                        startIcon={<Close />}
                        onClick={handleDismissAlarm}
                        sx={{ py: 2, fontSize: '1.1rem' }}
                    >
                        –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–µ–≤–æ–≥—É
                    </Button>
                </Box>

                {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
                <Alert
                    severity="warning"
                    sx={{
                        mt: 3,
                        bgcolor: 'warning.dark',
                        color: 'warning.contrastText',
                        '& .MuiAlert-icon': {
                            color: 'warning.contrastText'
                        }
                    }}
                >
                    <Typography variant="body1" fontWeight="bold">
                        –í–Ω–∏–º–∞–Ω–∏–µ!
                    </Typography>
                    <Typography variant="body2">
                        –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –æ–±—ä–µ–∫—Ç—É. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                    </Typography>
                </Alert>
            </Box>

            {/* CSS –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è */}
            <style>
                {`
                    @keyframes blink {
                        0% { opacity: 1; }
                        100% { opacity: 0.3; }
                    }
                `}
            </style>
        </Box>
    );
}; 