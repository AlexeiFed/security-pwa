/**
 * @file: YandexMap.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç API
 * @dependencies: react, yandex-maps, colors
 * @created: 2025-06-27
 */

import React, { useEffect, useRef, useState } from 'react';
import { Box, CircularProgress, Typography } from '@mui/material';
import { colors } from '../../utils/colors';
import { MapMarker } from '../../types';

// –¢–∏–ø—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
declare global {
    interface Window {
        ymaps: any;
    }
}

interface YandexMapProps {
    center?: [number, number]; // [latitude, longitude]
    zoom?: number;
    markers?: MapMarker[];
    hoveredObjectId?: string | null;
    onMarkerClick?: (markerId: string) => void;
    onMarkerHover?: (markerId: string) => void;
    onMarkerLeave?: () => void;
    onMapClick?: (coordinates: { lat: number; lng: number }) => void;
    height?: string | number;
    width?: string | number;
    showCurrentLocation?: boolean;
    showClickMarker?: boolean;
    className?: string;
    // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    showRoute?: boolean;
    routeToObjectId?: string | null;
    onRouteCalculated?: (routeInfo: { distance: string; duration: string }) => void;
    onRouteClose?: () => void;
}

const YandexMap: React.FC<YandexMapProps> = ({
    center = [55.7558, 37.6176], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [lat, lng]
    zoom = 10,
    markers = [],
    hoveredObjectId,
    onMarkerClick,
    onMarkerHover,
    onMarkerLeave,
    onMapClick,
    height = 400,
    width = '100%',
    showCurrentLocation = false,
    showClickMarker = false,
    className,
    showRoute = false,
    routeToObjectId = null,
    onRouteCalculated,
    onRouteClose
}) => {
    const mapRef = useRef<HTMLDivElement>(null);
    const mapInstanceRef = useRef<any>(null);
    const clickMarkerRef = useRef<any>(null);
    const markerObjectsRef = useRef<any[]>([]);
    const routeRef = useRef<any>(null);
    const currentLocationRef = useRef<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [apiReady, setApiReady] = useState(false);
    const [currentLocation, setCurrentLocation] = useState<[number, number] | null>(null);
    const [routeInfo, setRouteInfo] = useState<{ distance: string; duration: string } | null>(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç API
    useEffect(() => {
        const loadYandexMaps = () => {
            if (window.ymaps) {
                window.ymaps.ready(() => {
                    setApiReady(true);
                    setLoading(false);
                });
                return;
            }
            const existingScript = document.querySelector('script[src*="api-maps.yandex.ru"]');
            if (existingScript) {
                const checkYmaps = () => {
                    if (window.ymaps) {
                        window.ymaps.ready(() => {
                            setApiReady(true);
                            setLoading(false);
                        });
                    } else {
                        setTimeout(checkYmaps, 100);
                    }
                };
                checkYmaps();
                return;
            }
            const script = document.createElement('script');
            const apiKey = process.env.REACT_APP_YANDEX_MAPS_API_KEY || 'your_yandex_maps_api_key_here';
            script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
            script.async = true;
            script.onload = () => {
                window.ymaps.ready(() => {
                    setApiReady(true);
                    setLoading(false);
                });
            };
            script.onerror = () => {
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç');
                setLoading(false);
            };
            document.head.appendChild(script);
        };
        loadYandexMaps();
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    const getCurrentLocation = (): Promise<[number, number]> => {
        return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
                reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
                return;
            }

            let attempts = 0;
            const maxAttempts = 3;

            const tryGetLocation = () => {
                attempts++;
                console.log(`üìç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ${attempts}/${maxAttempts}`);

                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude, accuracy } = position.coords;
                        console.log(`‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é ${accuracy}–º`);

                        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Ö—É–∂–µ 50 –º–µ—Ç—Ä–æ–≤, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                        if (accuracy > 50 && attempts < maxAttempts) {
                            console.log(`‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å ${accuracy}–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...`);
                            setTimeout(tryGetLocation, 2000);
                            return;
                        }

                        resolve([latitude, longitude]);
                    },
                    (error) => {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}):`, error);
                        if (attempts < maxAttempts) {
                            setTimeout(tryGetLocation, 2000);
                        } else {
                            reject(error);
                        }
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 30000,
                        maximumAge: 0
                    }
                );
            };

            tryGetLocation();
        });
    };

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    const buildRoute = async (from: [number, number], to: [number, number]) => {
        if (!window.ymaps || !mapInstanceRef.current) return;

        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
            if (routeRef.current) {
                mapInstanceRef.current.geoObjects.remove(routeRef.current);
                routeRef.current = null;
            }

            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
            const multiRoute = new window.ymaps.multiRouter.MultiRoute({
                referencePoints: [
                    from,
                    to
                ],
                params: {
                    routingMode: 'driving'
                }
            }, {
                boundsAutoApply: true,
                routeActiveStrokeWidth: 4,
                routeActiveStrokeColor: '#1976d2',
                routeStrokeColor: '#1976d2',
                routeStrokeWidth: 3
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—É
            mapInstanceRef.current.geoObjects.add(multiRoute);
            routeRef.current = multiRoute;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
            multiRoute.model.events.add('requestsuccess', () => {
                const activeRoute = multiRoute.getActiveRoute();
                if (activeRoute) {
                    const properties = activeRoute.properties.getAll();
                    const distance = properties.distance?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    const duration = properties.duration?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

                    const routeData = { distance, duration };
                    setRouteInfo(routeData);
                    if (onRouteCalculated) {
                        onRouteCalculated(routeData);
                    }
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    useEffect(() => {
        if (!window.ymaps || !mapRef.current || loading || !apiReady) return;
        if (mapInstanceRef.current) return;
        try {
            const [lat, lng] = center;
            const map = new window.ymaps.Map(mapRef.current, {
                center: [lat, lng],
                zoom: zoom,
                controls: ['zoomControl', 'fullscreenControl', 'geolocationControl'],
                // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                suppressMapOpenBlock: true,
                // –†–∞–∑—Ä–µ—à–∞–µ–º –∂–µ—Å—Ç—ã –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
                suppressObsoleteBrowserNotifier: true
            });

            // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∂–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
            map.behaviors.enable('drag');
            map.behaviors.enable('scrollZoom');

            // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∂–µ—Å—Ç—ã
            if ('ontouchstart' in window) {
                // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º—É–ª—å—Ç–∏—Ç–∞—á –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
                map.behaviors.enable('multiTouch');
                // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∂–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
                map.behaviors.enable('pinchZoom');
            }
            mapInstanceRef.current = map;
            if (onMapClick) {
                map.events.add('click', (e: any) => {
                    const coords = e.get('coords');
                    if (clickMarkerRef.current) {
                        map.geoObjects.remove(clickMarkerRef.current);
                    }
                    if (showClickMarker) {
                        const clickMarker = new window.ymaps.Placemark(
                            coords,
                            { balloonContent: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞' },
                            { preset: 'islands#blueDotIcon', iconColor: '#1976d2' }
                        );
                        map.geoObjects.add(clickMarker);
                        clickMarkerRef.current = clickMarker;
                    }
                    onMapClick({ lat: coords[0], lng: coords[1] });
                });
            }
            if (showCurrentLocation) {
                window.ymaps.geolocation.get({ provider: 'browser', mapStateAutoApply: true }).then((result: any) => {
                    result.geoObjects.options.set('preset', 'islands#blueCircleIcon');
                    map.geoObjects.add(result.geoObjects);
                });
            }
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
        }
    }, [loading, apiReady, center, zoom, onMapClick, showCurrentLocation, showClickMarker]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
    useEffect(() => {
        if (!window.ymaps || !mapInstanceRef.current || !apiReady) return;
        const map = mapInstanceRef.current;
        markerObjectsRef.current.forEach(marker => map.geoObjects.remove(marker));
        markerObjectsRef.current = [];
        markers.forEach((marker) => {
            if (!marker.position || marker.position.length !== 2) return;
            const [lat, lng] = marker.position;
            const markerOptions: any = {
                preset: 'islands#blueDotIcon',
                iconColor: '#1976d2',
                iconImageSize: [32, 32],
                iconImageOffset: [-16, -16]
            };
            if (marker.isSelected) {
                markerOptions.iconImageSize = [48, 48];
                markerOptions.iconImageOffset = [-24, -24];
                markerOptions.strokeColor = '#1976d2';
                markerOptions.strokeWidth = 3;
            }
            if (hoveredObjectId === marker.id) {
                markerOptions.preset = 'islands#redIcon';
                markerOptions.iconColor = '#d32f2f';
                markerOptions.iconImageSize = [40, 40];
                markerOptions.iconImageOffset = [-20, -20];
                markerOptions.strokeColor = '#d32f2f';
                markerOptions.strokeWidth = 3;
            }
            const placemark = new window.ymaps.Placemark(
                [lat, lng],
                {
                    balloonContent: `<div style="padding: 10px; min-width: 200px;"><h3 style="margin: 0 0 10px 0; color: #1976d2;">${marker.title}</h3><p style="margin: 5px 0; color: #666;">–°—Ç–∞—Ç—É—Å: ${marker.status === 'checked' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–æ–±–ª–µ–º—ã'}</p></div>`,
                    iconContent: marker.isSelected ? marker.title : undefined
                },
                markerOptions
            );
            if (onMarkerClick) {
                placemark.events.add('click', () => {
                    onMarkerClick(marker.id);
                });
            }
            if (onMarkerHover) {
                placemark.events.add('mouseenter', () => {
                    onMarkerHover(marker.id);
                });
            }
            if (onMarkerLeave) {
                placemark.events.add('mouseleave', () => {
                    onMarkerLeave();
                });
            }
            map.geoObjects.add(placemark);
            markerObjectsRef.current.push(placemark);
        });
    }, [markers, hoveredObjectId, onMarkerClick, onMarkerHover, onMarkerLeave, apiReady]);

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if (!showRoute || !routeToObjectId || !mapInstanceRef.current || !apiReady) return;

        let isBuilt = false;
        const targetMarker = markers.find(m => m.id === routeToObjectId);
        if (!targetMarker || !targetMarker.position) return;

        const buildRouteToObject = async () => {
            if (isBuilt) return;
            isBuilt = true;
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                const location = await getCurrentLocation();
                setCurrentLocation(location);

                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                if (currentLocationRef.current) {
                    mapInstanceRef.current.geoObjects.remove(currentLocationRef.current);
                }
                currentLocationRef.current = new window.ymaps.Placemark(
                    location,
                    {
                        balloonContent: `
                            <div style="padding: 10px; min-width: 200px;">
                                <h3 style="margin: 0 0 10px 0; color: #4caf50;">üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
                                <p style="margin: 5px 0; color: #666;">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${location[0].toFixed(6)}, ${location[1].toFixed(6)}</p>
                                <p style="margin: 5px 0; color: #666;">–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</p>
                            </div>
                        `
                    },
                    {
                        preset: 'islands#blueCircleDotIcon',
                        iconColor: '#1976d2',
                        iconImageSize: [40, 40],
                        iconImageOffset: [-20, -20],
                        strokeColor: '#1976d2',
                        strokeWidth: 2
                    }
                );
                mapInstanceRef.current.geoObjects.add(currentLocationRef.current);

                // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
                await buildRoute(location, targetMarker.position);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            }
        };

        buildRouteToObject();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [showRoute, routeToObjectId, apiReady]);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            if (routeRef.current && mapInstanceRef.current) {
                mapInstanceRef.current.geoObjects.remove(routeRef.current);
            }
            if (currentLocationRef.current && mapInstanceRef.current) {
                mapInstanceRef.current.geoObjects.remove(currentLocationRef.current);
            }
        };
    }, []);

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" height={height} width={width} bgcolor={colors.background.secondary}>
                <CircularProgress />
            </Box>
        );
    }
    if (error) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" height={height} width={width} bgcolor={colors.background.secondary}>
                <Typography color="error">{error}</Typography>
            </Box>
        );
    }
    return (
        <div
            ref={mapRef}
            id="yandex-map-container"
            style={{
                height: typeof height === 'number' ? `${height}px` : height,
                width: typeof width === 'number' ? `${width}px` : width,
                border: `1px solid ${colors.border.light}`,
                backgroundColor: '#f0f0f0',
                minHeight: 200,
                minWidth: 200,
                position: 'relative'
            }}
        />
    );
};

export default YandexMap; 