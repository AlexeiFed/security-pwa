/**
 * @file: AuthContext.tsx
 * @description: React Context –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @dependencies: react, auth service
 * @created: 2025-06-27
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, AuthContextType } from '../types';
import { authService } from '../services/auth';
import { onAuthStateChanged, User as FirebaseUser } from 'firebase/auth';
import { auth } from '../services/firebase';
import { subscribeUserToPush, restorePushSubscription } from '../services/webpush';
import { cacheManager } from '../services/cache';
import LoadingIndicator from '../components/common/LoadingIndicator';

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
    children: ReactNode;
}

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const AUTH_CACHE_KEY = 'security_pwa_auth_cache';
const AUTH_TIMESTAMP_KEY = 'security_pwa_auth_timestamp';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
const saveUserToCache = (user: User) => {
    try {
        localStorage.setItem(AUTH_CACHE_KEY, JSON.stringify(user));
        localStorage.setItem(AUTH_TIMESTAMP_KEY, Date.now().toString());
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à:', error);
    }
};

const getUserFromCache = (): User | null => {
    try {
        const cachedUser = localStorage.getItem(AUTH_CACHE_KEY);
        const timestamp = localStorage.getItem(AUTH_TIMESTAMP_KEY);

        if (!cachedUser || !timestamp) return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        const cacheAge = Date.now() - parseInt(timestamp);
        if (cacheAge > 60 * 60 * 1000) {
            console.log('–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º');
            clearUserCache();
            return null;
        }

        const user = JSON.parse(cachedUser);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞');
        return user;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞:', error);
        return null;
    }
};

const clearUserCache = () => {
    try {
        localStorage.removeItem(AUTH_CACHE_KEY);
        localStorage.removeItem(AUTH_TIMESTAMP_KEY);
        console.log('–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω');
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
};

export const AuthProvider = ({ children }: AuthProviderProps) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    const [preloadingData, setPreloadingData] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
    const getUserData = async (firebaseUser: FirebaseUser): Promise<User | null> => {
        try {
            const userData = await authService.getUserData(firebaseUser.uid);
            return userData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const initializeAuth = async () => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const cachedUser = getUserFromCache();
            if (cachedUser) {
                console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞:', cachedUser);
                setUser(cachedUser);

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º push-–ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PWA
                try {
                    await restorePushSubscription(cachedUser.uid);
                    console.log('‚úÖ Push-–ø–æ–¥–ø–∏—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
                } catch (error) {
                    console.warn('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∏:', error);
                }

                setLoading(false);
            }
        };

        initializeAuth();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç service worker –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        const handleServiceWorkerMessage = (event: MessageEvent) => {
            if (event.data && event.data.type === 'FORCE_LOGOUT') {
                console.log('üö™ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ –≤ AuthContext:', event.data);

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                const performForceLogout = async () => {
                    try {
                        console.log('üîÑ AuthContext: –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥...');

                        // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                        localStorage.clear();
                        sessionStorage.clear();

                        // –í—ã—Ö–æ–¥–∏–º –∏–∑ Firebase Auth
                        await authService.logout();

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        setUser(null);
                        clearUserCache();

                        console.log('‚úÖ AuthContext: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');

                        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                        window.location.href = '/login';
                    } catch (error) {
                        console.error('‚ùå AuthContext: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ:', error);
                        // Fallback
                        localStorage.clear();
                        sessionStorage.clear();
                        setUser(null);
                        window.location.reload();
                    }
                };

                performForceLogout();
            }
        };

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç service worker
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);
        }

        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            console.log('onAuthStateChanged:', firebaseUser);
            console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', firebaseUser?.uid);

            if (firebaseUser) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Firebase
                const userData = await getUserData(firebaseUser);
                if (userData) {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userData);
                    setUser(userData);
                    saveUserToCache(userData);

                    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                    try {
                        setPreloadingData(true);
                        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–æ–ª–∏:', userData.role);

                        if (userData.role === 'admin') {
                            await cacheManager.preloadAllData();
                        } else if (userData.role === 'curator') {
                            await cacheManager.getObjects();
                        } else if (userData.role === 'inspector') {
                            // –î–ª—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã
                            await cacheManager.getObjects();
                        }

                        console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    } catch (cacheError) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', cacheError);
                    } finally {
                        setPreloadingData(false);
                    }

                    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push
                    try {
                        await subscribeUserToPush(userData.uid);
                        console.log('Push-–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
                    } catch (e) {
                        console.warn('–û—à–∏–±–∫–∞ push-–ø–æ–¥–ø–∏—Å–∫–∏:', e);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                        if (e.message && e.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')) {
                            console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                            console.warn('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
                        } else if (e.message && e.message.includes('–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã')) {
                            console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                            console.warn('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                        } else if (e.message && e.message.includes('applicationServerKey')) {
                            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...');
                            try {
                                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                                const registration = await navigator.serviceWorker.ready;
                                const existingSubscription = await registration.pushManager.getSubscription();
                                if (existingSubscription) {
                                    await existingSubscription.unsubscribe();
                                    console.log('‚úÖ –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
                                }

                                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                                await subscribeUserToPush(userData.uid);
                                console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                            } catch (updateError) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', updateError);
                            }
                        } else {
                            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ push-–ø–æ–¥–ø–∏—Å–∫–∏:', e);
                        }
                    }
                } else {
                    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                    await authService.logout();
                    setUser(null);
                    clearUserCache();
                }
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                setUser(null);
                clearUserCache();
            }

            setLoading(false);
        });

        return () => {
            unsubscribe();
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π service worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.removeEventListener('message', handleServiceWorkerMessage);
            }
        };
    }, []);

    const login = async (email: string, password: string) => {
        console.log('AuthContext: –Ω–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞');
        setLoading(true);
        try {
            const userData = await authService.login(email, password);
            console.log('AuthContext: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', userData);
            setUser(userData);
            saveUserToCache(userData);

            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            try {
                setPreloadingData(true);
                console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–æ–ª–∏:', userData.role);

                if (userData.role === 'admin') {
                    await cacheManager.preloadAllData();
                } else if (userData.role === 'curator') {
                    await cacheManager.getObjects();
                } else if (userData.role === 'inspector') {
                    // –î–ª—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã
                    await cacheManager.getObjects();
                }

                console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } catch (cacheError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', cacheError);
            } finally {
                setPreloadingData(false);
            }

            try {
                await subscribeUserToPush(userData.uid);
                console.log('Push-–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ push-–ø–æ–¥–ø–∏—Å–∫–∏:', e);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                if (e.message && e.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')) {
                    console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                    console.warn('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
                } else if (e.message && e.message.includes('–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã')) {
                    console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                    console.warn('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                } else if (e.message && e.message.includes('applicationServerKey')) {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...');
                    try {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                        const registration = await navigator.serviceWorker.ready;
                        const existingSubscription = await registration.pushManager.getSubscription();
                        if (existingSubscription) {
                            await existingSubscription.unsubscribe();
                            console.log('‚úÖ –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
                        }

                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        await subscribeUserToPush(userData.uid);
                        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                    } catch (updateError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', updateError);
                    }
                } else {
                    console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ push-–ø–æ–¥–ø–∏—Å–∫–∏:', e);
                }
            }
            setTimeout(() => {
                setLoading(false);
            }, 100);
        } catch (error) {
            console.error('AuthContext: –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', error);
            setLoading(false);
            throw error;
        }
    };

    const logout = async () => {
        setLoading(true);
        try {
            await authService.logout();
            setUser(null);
            clearUserCache();

            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            cacheManager.clearCache();
            cacheManager.unsubscribeAll();
            console.log('üóëÔ∏è –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        } finally {
            setLoading(false);
        }
    };

    const updateUserCredentials = async (currentPassword: string, newPassword?: string) => {
        try {
            await authService.updateCredentials(currentPassword, newPassword);
            console.log('‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    };

    const value: AuthContextType = {
        user,
        loading,
        login,
        logout,
        updateUserCredentials,
        getUserData: authService.getUserData
    };

    return (
        <AuthContext.Provider value={value}>
            {preloadingData && (
                <LoadingIndicator
                    message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
                    fullScreen={true}
                />
            )}
            {children}
        </AuthContext.Provider>
    ) as React.ReactElement;
};

export const useAuth = (): AuthContextType => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider');
    }
    return context;
}; 