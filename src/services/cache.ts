/**
 * @file: cache.ts
 * @description: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @dependencies: firebase, auth, objects, tasks
 * @created: 2025-07-20
 */

import { db } from './firebase';
import { collection, query, where, onSnapshot, orderBy } from 'firebase/firestore';
import { ObjectData, Task, Curator, Inspector } from '../types';
import { getObjects } from './objects';
import { getCurators } from './auth';
import { getInspectors } from './auth';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è localStorage
const STORAGE_KEY = 'security_pwa_cache';
const STORAGE_VERSION = '1.0';

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
interface AppCache {
    objects: ObjectData[];
    tasks: Task[];
    curators: Curator[];
    inspectors: Inspector[];
    lastUpdated: {
        objects: number;
        tasks: number;
        curators: number;
        inspectors: number;
    };
}

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (10 –º–∏–Ω—É—Ç –¥–ª—è localStorage, 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–∞–º—è—Ç–∏)
const CACHE_TTL = 5 * 60 * 1000;
const STORAGE_CACHE_TTL = 10 * 60 * 1000;

class CacheManager {
    private cache: AppCache = {
        objects: [],
        tasks: [],
        curators: [],
        inspectors: [],
        lastUpdated: {
            objects: 0,
            tasks: 0,
            curators: 0,
            inspectors: 0,
        }
    };

    private isInitialized = false;
    private initializationPromise: Promise<void> | null = null;

    private listeners: {
        objects: (() => void) | null;
        tasks: (() => void) | null;
        curators: (() => void) | null;
        inspectors: (() => void) | null;
    } = {
            objects: null,
            tasks: null,
            curators: null,
            inspectors: null
        };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏–∑ localStorage
    private async initializeCache(): Promise<void> {
        if (this.isInitialized) return;

        if (this.initializationPromise) {
            return this.initializationPromise;
        }

        this.initializationPromise = this.loadFromStorage();
        await this.initializationPromise;
        this.isInitialized = true;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ localStorage
    private async loadFromStorage(): Promise<void> {
        try {
            const stored = localStorage.getItem(STORAGE_KEY);
            if (!stored) return;

            const data = JSON.parse(stored);
            if (data.version !== STORAGE_VERSION) {
                console.log('üîÑ –í–µ—Ä—Å–∏—è –∫—ç—à–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ—á–∏—â–∞–µ–º localStorage');
                localStorage.removeItem(STORAGE_KEY);
                return;
            }

            const now = Date.now();
            let hasValidData = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            Object.keys(data.cache.lastUpdated).forEach(key => {
                const type = key as keyof AppCache['lastUpdated'];
                const age = now - data.cache.lastUpdated[type];
                if (age < STORAGE_CACHE_TTL && data.cache[type]?.length > 0) {
                    this.cache[type] = data.cache[type];
                    this.cache.lastUpdated[type] = data.cache.lastUpdated[type];
                    hasValidData = true;
                    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –∏–∑ localStorage: ${type} (${data.cache[type].length} –∑–∞–ø–∏—Å–µ–π)`);
                }
            });

            if (hasValidData) {
                console.log('‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑ localStorage:', error);
            localStorage.removeItem(STORAGE_KEY);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ localStorage
    private saveToStorage(): void {
        try {
            const data = {
                version: STORAGE_VERSION,
                timestamp: Date.now(),
                cache: this.cache
            };
            localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
            console.log('üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≤ localStorage:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
    private isCacheValid(type: keyof AppCache['lastUpdated']): boolean {
        const now = Date.now();
        return (now - this.cache.lastUpdated[type]) < CACHE_TTL;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getObjects(): Promise<ObjectData[]> {
        await this.initializeCache();

        if (this.isCacheValid('objects') && this.cache.objects.length > 0) {
            console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫—ç—à–∞');
            return this.cache.objects;
        }

        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ Firebase');
        const objects = await getObjects();
        this.cache.objects = objects;
        this.cache.lastUpdated.objects = Date.now();
        this.saveToStorage();
        return objects;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getCurators(): Promise<Curator[]> {
        await this.initializeCache();

        if (this.isCacheValid('curators') && this.cache.curators.length > 0) {
            console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞');
            return this.cache.curators;
        }

        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Firebase');
        const curators = await getCurators();
        this.cache.curators = curators;
        this.cache.lastUpdated.curators = Date.now();
        this.saveToStorage();
        return curators;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getInspectors(): Promise<Inspector[]> {
        await this.initializeCache();

        if (this.isCacheValid('inspectors') && this.cache.inspectors.length > 0) {
            console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞');
            return this.cache.inspectors;
        }

        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ Firebase');
        const inspectors = await getInspectors();
        this.cache.inspectors = inspectors;
        this.cache.lastUpdated.inspectors = Date.now();
        this.saveToStorage();
        return inspectors;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    subscribeToTasks(userId: string, callback: (tasks: Task[]) => void): () => void {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (this.isCacheValid('tasks') && this.cache.tasks.length > 0) {
            const userTasks = this.cache.tasks.filter(task => task.assignedTo === userId);
            callback(userTasks);
        }

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if (this.listeners.tasks) {
            this.listeners.tasks();
        }

        console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –∏–∑ Firebase');
        const q = query(
            collection(db, 'tasks'),
            where('assignedTo', '==', userId)
        );

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const tasks: Task[] = [];
            querySnapshot.forEach((doc) => {
                const d = doc.data();
                tasks.push({
                    id: doc.id,
                    title: d.title,
                    description: d.description,
                    status: d.status,
                    assignedTo: d.assignedTo,
                    assignedToName: d.assignedToName,
                    createdAt: d.createdAt?.toDate() || new Date(),
                    assignedAt: d.assignedAt?.toDate(),
                    acceptedAt: d.acceptedAt?.toDate(),
                    completedAt: d.completedAt?.toDate(),
                    objects: d.objects || [],
                    objectIds: d.objectIds || [],
                    location: d.location
                });
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            const sortedTasks = tasks.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.tasks = sortedTasks;
            this.cache.lastUpdated.tasks = Date.now();

            console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –∑–∞–¥–∞–Ω–∏–π');
            callback(sortedTasks);
        });

        this.listeners.tasks = unsubscribe;
        return unsubscribe;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    subscribeToObjects(callback: (objects: ObjectData[]) => void): () => void {
        console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –∏–∑ Firebase');
        const q = query(collection(db, 'objects'), orderBy('createdAt', 'desc'));

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const objects: ObjectData[] = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                objects.push({
                    id: doc.id,
                    name: data.name,
                    address: data.address,
                    description: data.description,
                    position: data.position || [0, 0],
                    status: data.status || 'active',
                    createdAt: data.createdAt?.toDate() || new Date(),
                    updatedAt: data.updatedAt?.toDate()
                });
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.objects = objects;
            this.cache.lastUpdated.objects = Date.now();
            this.saveToStorage();

            console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –æ–±—ä–µ–∫—Ç–æ–≤');
            callback(objects);
        });

        this.listeners.objects = unsubscribe;
        return unsubscribe;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
    subscribeToCurators(callback: (curators: Curator[]) => void): () => void {
        console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Firebase');
        const q = query(collection(db, 'curators'), orderBy('createdAt', 'desc'));

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const curators: Curator[] = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                curators.push({
                    uid: doc.id,
                    name: data.name,
                    email: data.email,
                    phone: data.phone,
                    assignedObjects: data.assignedObjects || [],
                    createdAt: data.createdAt?.toDate() || new Date(),
                    role: 'curator',
                    status: data.status || 'working'
                });
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.curators = curators;
            this.cache.lastUpdated.curators = Date.now();
            this.saveToStorage();

            console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –∫—É—Ä–∞—Ç–æ—Ä–æ–≤');
            callback(curators);
        });

        this.listeners.curators = unsubscribe;
        return unsubscribe;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤)
    subscribeToObjectTasks(objectId: string, callback: (tasks: Task[]) => void): () => void {
        console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ Firebase');
        const q = query(
            collection(db, 'tasks'),
            where('objectIds', 'array-contains', objectId)
        );

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const tasks: Task[] = [];
            querySnapshot.forEach((doc) => {
                const d = doc.data();
                tasks.push({
                    id: doc.id,
                    title: d.title,
                    description: d.description,
                    status: d.status,
                    assignedTo: d.assignedTo,
                    assignedToName: d.assignedToName,
                    createdAt: d.createdAt?.toDate() || new Date(),
                    assignedAt: d.assignedAt?.toDate(),
                    acceptedAt: d.acceptedAt?.toDate(),
                    completedAt: d.completedAt?.toDate(),
                    objects: d.objects || [],
                    objectIds: d.objectIds || [],
                    location: d.location
                });
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            const sortedTasks = tasks.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞');
            callback(sortedTasks);
        });

        return unsubscribe;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞
    subscribeToCuratorObjectsTasks(objectIds: string[], callback: (tasks: Task[]) => void): () => void {
        console.log('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ Firebase');

        if (objectIds.length === 0) {
            callback([]);
            return () => { };
        }

        const q = query(
            collection(db, 'tasks'),
            where('objectIds', 'array-contains-any', objectIds)
        );

        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const tasks: Task[] = [];
            querySnapshot.forEach((doc) => {
                const d = doc.data();
                tasks.push({
                    id: doc.id,
                    title: d.title,
                    description: d.description,
                    status: d.status,
                    assignedTo: d.assignedTo,
                    assignedToName: d.assignedToName,
                    createdAt: d.createdAt?.toDate() || new Date(),
                    assignedAt: d.assignedAt?.toDate(),
                    acceptedAt: d.acceptedAt?.toDate(),
                    completedAt: d.completedAt?.toDate(),
                    objects: d.objects || [],
                    objectIds: d.objectIds || [],
                    location: d.location
                });
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            const sortedTasks = tasks.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞:', sortedTasks.length);
            callback(sortedTasks);
        });

        return unsubscribe;
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    async preloadAllData(): Promise<{
        objects: ObjectData[];
        curators: Curator[];
        inspectors: Inspector[];
    }> {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
        const startTime = Date.now();

        try {
            await this.initializeCache();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [objects, curators, inspectors] = await Promise.all([
                this.getObjects(),
                this.getCurators(),
                this.getInspectors()
            ]);

            const loadTime = Date.now() - startTime;
            console.log(`‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${loadTime}ms:`, {
                objects: objects.length,
                curators: curators.length,
                inspectors: inspectors.length
            });

            return { objects, curators, inspectors };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache(type?: keyof AppCache['lastUpdated']) {
        if (type) {
            this.cache[type] = [];
            this.cache.lastUpdated[type] = 0;
            console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à: ${type}`);
        } else {
            this.cache = {
                objects: [],
                tasks: [],
                curators: [],
                inspectors: [],
                lastUpdated: {
                    objects: 0,
                    tasks: 0,
                    curators: 0,
                    inspectors: 0,
                }
            };
            console.log('üóëÔ∏è –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à');
        }
        this.saveToStorage();
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    async refreshCache(type?: keyof AppCache['lastUpdated']) {
        if (type) {
            this.cache.lastUpdated[type] = 0;
            console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞: ${type}`);
        } else {
            Object.keys(this.cache.lastUpdated).forEach(key => {
                this.cache.lastUpdated[key as keyof AppCache['lastUpdated']] = 0;
            });
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—ç—à–∞');
        }
    }

    // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    unsubscribeAll() {
        Object.values(this.listeners).forEach(unsubscribe => {
            if (unsubscribe) {
                unsubscribe();
            }
        });
        this.listeners = {
            objects: null,
            tasks: null,
            curators: null,
            inspectors: null
        };
        console.log('üîå –û—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    getCacheStats() {
        const now = Date.now();
        return {
            objects: {
                count: this.cache.objects.length,
                age: now - this.cache.lastUpdated.objects,
                isValid: this.isCacheValid('objects')
            },
            tasks: {
                count: this.cache.tasks.length,
                age: now - this.cache.lastUpdated.tasks,
                isValid: this.isCacheValid('tasks')
            },
            curators: {
                count: this.cache.curators.length,
                age: now - this.cache.lastUpdated.curators,
                isValid: this.isCacheValid('curators')
            },
            inspectors: {
                count: this.cache.inspectors.length,
                age: now - this.cache.lastUpdated.inspectors,
                isValid: this.isCacheValid('inspectors')
            }
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const cacheManager = new CacheManager(); 