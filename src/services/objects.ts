/**
 * @file: objects.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ Firestore
 * @dependencies: firebase/firestore, types
 * @created: 2025-06-27
 */

import {
    collection,
    doc,
    getDocs,
    getDoc,
    addDoc,
    updateDoc,
    deleteDoc,
    query,
    where,
    orderBy,
    Timestamp
} from 'firebase/firestore';
import { db } from './firebase';
import { ObjectData, ObjectStatus } from '../types';

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
export interface CreateObjectData {
    name: string;
    address: string;
    description: string;
    position: [number, number];
    status: ObjectStatus;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
export const getObjects = async (): Promise<ObjectData[]> => {
    try {
        const q = query(
            collection(db, 'objects'),
            orderBy('createdAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const objects: ObjectData[] = [];

        querySnapshot.forEach((doc) => {
            const data = doc.data();
            console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firestore:', data);

            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤ [lat, lng]
            let position: [number, number] = [48.4827, 135.0840]; // –•–∞–±–∞—Ä–æ–≤—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (data.position) {
                console.log('–ü–æ–∑–∏—Ü–∏—è –∏–∑ Firestore:', data.position);
                if (Array.isArray(data.position) && data.position.length === 2) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    position = [data.position[0], data.position[1]];
                    console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞:', position);
                } else if (data.position._lat && data.position._lng) {
                    // –ï—Å–ª–∏ —ç—Ç–æ GeoPoint (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    position = [data.position._lat, data.position._lng];
                    console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ GeoPoint:', position);
                }
            } else {
                console.log('–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }

            const object: ObjectData = {
                id: doc.id,
                name: data.name || '',
                address: data.address || '',
                description: data.description || '',
                position,
                status: data.status || 'active',
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate()
            };

            objects.push(object);
        });

        return objects;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤');
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID
export const getObjectById = async (id: string): Promise<ObjectData | null> => {
    try {
        const docRef = doc(db, 'objects', id);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
            const data = docSnap.data();

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GeoPoint –≤ –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            let position: [number, number] = [48.4827, 135.0840];
            if (data.position) {
                if (data.position._lat && data.position._lng) {
                    position = [data.position._lat, data.position._lng];
                } else if (Array.isArray(data.position) && data.position.length === 2) {
                    position = [data.position[0], data.position[1]];
                }
            }

            const object: ObjectData = {
                id: docSnap.id,
                name: data.name || '',
                address: data.address || '',
                description: data.description || '',
                position,
                status: data.status || 'active',
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate()
            };

            return object;
        }

        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
export const createObject = async (objectData: CreateObjectData): Promise<string> => {
    try {
        console.log('–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', objectData);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –∞ –Ω–µ GeoPoint
        const docData = {
            name: objectData.name,
            address: objectData.address,
            description: objectData.description,
            position: objectData.position, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ [lat, lng]
            status: objectData.status,
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now()
        };
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore:', docData);

        const docRef = await addDoc(collection(db, 'objects'), docData);
        console.log('–û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID:', docRef.id);
        return docRef.id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
export const updateObject = async (id: string, updates: Partial<CreateObjectData>): Promise<void> => {
    try {
        const docRef = doc(db, 'objects', id);
        const updateData: any = {
            ...updates,
            updatedAt: Timestamp.now()
        };

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤, –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ GeoPoint
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç:', updateData);

        await updateDoc(docRef, updateData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
    }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
export const deleteObject = async (id: string): Promise<void> => {
    try {
        const docRef = doc(db, 'objects', id);
        await deleteDoc(docRef);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞');
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
export const getObjectsByStatus = async (status: ObjectStatus): Promise<ObjectData[]> => {
    try {
        const q = query(
            collection(db, 'objects'),
            where('status', '==', status)
            // –£–±–∏—Ä–∞–µ–º orderBy –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        );

        const querySnapshot = await getDocs(q);
        const objects: ObjectData[] = [];

        querySnapshot.forEach((doc) => {
            const data = doc.data();
            let position: [number, number] = [48.4827, 135.0840];
            if (data.position) {
                if (Array.isArray(data.position) && data.position.length === 2) {
                    position = [data.position[0], data.position[1]];
                } else if (data.position._lat && data.position._lng) {
                    position = [data.position._lat, data.position._lng];
                }
            }

            const object: ObjectData = {
                id: doc.id,
                name: data.name || '',
                address: data.address || '',
                description: data.description || '',
                position,
                status: data.status || 'active',
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate()
            };

            objects.push(object);
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        return objects.sort((a, b) => {
            const dateA = a.createdAt || new Date(0);
            const dateB = b.createdAt || new Date(0);
            return dateB.getTime() - dateA.getTime();
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É');
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–ª—è –∑–∞–¥–∞–Ω–∏–π)
export const getActiveObjects = async (): Promise<ObjectData[]> => {
    return await getObjectsByStatus('active');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä–∞—Ç–æ—Ä–∞–º)
export const getAvailableObjects = async (): Promise<ObjectData[]> => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        const { getCurators } = await import('./auth');
        const curators = await getCurators();

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const assignedObjectIds = new Set<string>();
        curators.forEach(curator => {
            curator.assignedObjects.forEach(objectId => {
                assignedObjectIds.add(objectId);
            });
        });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        const allObjects = await getObjects();

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const availableObjects = allObjects.filter(obj =>
            !assignedObjectIds.has(obj.id) && obj.status === 'active'
        );

        console.log('üìä –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', {
            totalObjects: allObjects.length,
            assignedObjects: assignedObjectIds.size,
            availableObjects: availableObjects.length
        });

        return availableObjects;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    }
}; 