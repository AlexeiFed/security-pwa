/**
 * @file: pushNotifications.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ push-server
 * @dependencies: firebase, webpush
 * @created: 2025-07-12
 */

import { db } from './firebase';
import { collection, getDocs } from 'firebase/firestore';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è push-server
const PUSH_SERVER_URL = process.env.REACT_APP_PUSH_SERVER_URL || 'https://push-server-b8p6.onrender.com';

export interface PushNotificationResult {
    success: boolean;
    message: string;
    sentCount?: number;
    errorCount?: number;
    errors?: string[];
    timestamp?: string;
}

export interface PushNotificationOptions {
    title?: string;
    body?: string;
    type?: 'alarm' | 'info' | 'warning';
    targetUsers?: string[]; // –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    targetAll?: boolean; // –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    objectId?: string; // ID –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–µ–≤–æ–≥–∏
    objectName?: string; // –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–µ–≤–æ–≥–∏
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export const sendAlarmPushToAll = async (title?: string, body?: string, objectId?: string, objectName?: string): Promise<PushNotificationResult> => {
    try {
        console.log('üö® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');

        const response = await fetch(`${PUSH_SERVER_URL}/send-alarm`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'alarm',
                target: 'all',
                title,
                body,
                objectId,
                objectName
            })
        });

        if (!response.ok) {
            if (response.status === 429) {
                const errorData = await response.json();
                console.log(`‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${errorData.message}`);
                return {
                    success: false,
                    message: errorData.message,
                    sentCount: 0,
                    errorCount: 1,
                    timestamp: new Date().toISOString()
                };
            }

            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            sentCount: 0,
            errorCount: 1,
            timestamp: new Date().toISOString()
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export const sendPushToUsers = async (userIds: string[], title?: string, body?: string, objectId?: string, objectName?: string): Promise<PushNotificationResult> => {
    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', userIds);

        const response = await fetch(`${PUSH_SERVER_URL}/send-alarm`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'alarm',
                target: 'users',
                userIds,
                title,
                body,
                objectId,
                objectName
            })
        });

        if (!response.ok) {
            if (response.status === 429) {
                const errorData = await response.json();
                console.log(`‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${errorData.message}`);
                return {
                    success: false,
                    message: errorData.message,
                    sentCount: 0,
                    errorCount: 1,
                    timestamp: new Date().toISOString()
                };
            }

            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            sentCount: 0,
            errorCount: 1,
            timestamp: new Date().toISOString()
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º
 */
export const sendPushByRole = async (
    role: 'admin' | 'curator' | 'inspector',
    options: PushNotificationOptions
): Promise<PushNotificationResult> => {
    try {
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é: ${role}`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
        const usersSnapshot = await getDocs(collection(db, 'users'));
        const targetUsers: string[] = [];

        usersSnapshot.forEach(doc => {
            const userData = doc.data();
            if (userData.role === role) {
                targetUsers.push(doc.id);
            }
        });

        if (targetUsers.length === 0) {
            return {
                success: false,
                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é ${role} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
            };
        }

        return await sendPushToUsers(targetUsers, options.title, options.body, options.objectId, options.objectName);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º:', error);
        return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
        };
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ push-server
 */
export const checkPushServerStatus = async (): Promise<boolean> => {
    try {
        const response = await fetch(`${PUSH_SERVER_URL}/status`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        return response.ok;
    } catch (error) {
        console.error('‚ùå Push-server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return false;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export const getPushSubscriptionsStats = async (): Promise<{
    total: number;
    valid: number;
    invalid: number;
}> => {
    try {
        const subscriptionsSnapshot = await getDocs(collection(db, 'push_subscriptions'));
        let valid = 0;
        let invalid = 0;

        subscriptionsSnapshot.forEach(doc => {
            const data = doc.data();
            if (data.subscription?.endpoint || data.endpoint) {
                valid++;
            } else {
                invalid++;
            }
        });

        return {
            total: subscriptionsSnapshot.size,
            valid,
            invalid
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        return { total: 0, valid: 0, invalid: 0 };
    }
}; 